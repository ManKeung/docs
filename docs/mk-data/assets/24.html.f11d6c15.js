import{_ as n,o as s,c as a,a as p}from"./app.dc008982.js";const t={},e=p(`<h1 id="\u4F7F\u7528es6\u4E2Dclass\u5B9E\u73B0\u624B\u5199promise" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528es6\u4E2Dclass\u5B9E\u73B0\u624B\u5199promise" aria-hidden="true">#</a> \u4F7F\u7528ES6\u4E2DClass\u5B9E\u73B0\u624B\u5199Promise</h1><h2 id="promise\u51FA\u73B0\u7684\u539F\u56E0" tabindex="-1"><a class="header-anchor" href="#promise\u51FA\u73B0\u7684\u539F\u56E0" aria-hidden="true">#</a> Promise\u51FA\u73B0\u7684\u539F\u56E0</h2><p>promise\u51FA\u73B0\u7684\u539F\u56E0\uFF0C\u8BF4\u767D\u4E86\u4E5F\u5C31\u662Fpromise\u89E3\u51B3\u4E86\u4EC0\u4E48\u95EE\u9898\uFF0C\u8FD9\u91CC\u6211\u5C31\u7B80\u5355\u8BF4\u70B9\u5427\uFF1A Promise \u662F\u5F02\u6B65\u7F16\u7A0B\u7684\u4E00\u79CD\u89E3\u51B3\u65B9\u6848\uFF0C\u6BD4\u4F20\u7EDF\u7684\u89E3\u51B3\u65B9\u6848\u56DE\u8C03\u51FD\u6570\u548C\u4E8B\u4EF6\u66F4\u5408\u7406\u548C\u66F4\u5F3A\u5927\uFF0CPromise\u7684\u51FA\u73B0\u4E3B\u8981\u89E3\u51B3\u4EE5\u4E0B\u4E24\u4E2A\u95EE\u9898\uFF1A</p><ul><li>\u56DE\u8C03\u5730\u72F1: \u67D0\u4E2A\u5F02\u6B65\u64CD\u4F5C\u9700\u8981\u7B49\u5F85\u4E4B\u524D\u7684\u64CD\u4F5C\u5B8C\u6210\u5728\u7EE7\u7EED\u6267\u884C, \u5F53\u8FD9\u6837\u7684\u9700\u6C42\u591A\u4E86\u4EE5\u540E, \u4F7F\u7684\u4EE3\u7801\u8FDB\u5165\u65E0\u5C3D\u7684\u5D4C\u5957\uFF0C\u53EF\u8BFB\u6027\u964D\u4F4E\u4E0D\u597D\u7EF4\u62A4\u3002</li><li>\u5F02\u6B65\u548C\u540C\u6B65\u4E4B\u95F4\u7684\u8054\u7CFB\u95EE\u9898\uFF1A\u5F53\u4E00\u4E2A\u540C\u6B65\u64CD\u4F5C\u9700\u8981\u7B49\u5F85\u591A\u4E2A\u5F02\u6B65\u64CD\u4F5C\u7684\u7ED3\u679C, \u8FD9\u6837\u4F1A\u4F7F\u5F97\u4EE3\u7801\u7684\u903B\u8F91\u53D8\u5F97\u76F8\u5BF9\u6765\u8BF4\u6BD4\u8F83\u590D\u6742\u3002</li></ul><h2 id="mypromise\u7684\u5B9E\u73B0\u8981\u70B9" tabindex="-1"><a class="header-anchor" href="#mypromise\u7684\u5B9E\u73B0\u8981\u70B9" aria-hidden="true">#</a> myPromise\u7684\u5B9E\u73B0\u8981\u70B9</h2><ul><li>Promise \u5C31\u662F\u4E00\u4E2A\u7C7B\uFF0C\u5B9E\u9645\u4E0A\u5C31\u662FES6\u63D0\u4F9B\u7684\u4E00\u4E2A\u65B0\u7684\u6784\u9020\u51FD\u6570\uFF0C</li><li>\u901A\u8FC7new\u521B\u5EFA\u5B9E\u4F8B\uFF0C\u63A5\u6536\u4E00\u4E2A\u51FD\u6570\u4F5C\u4E3A\u53C2\u6570\uFF0C\u5E76\u4E14\u8BE5\u51FD\u6570\u4E2D\u7684\u4EE3\u7801\u9ED8\u8BA4\u662F\u540C\u6B65\u4EE3\u7801\uFF0C\u4F1A\u7ACB\u5373\u6267\u884C</li><li>Promise \u6709\u4E09\u79CD\u72B6\u6001\uFF0C\u6210\u529Fresolved\uFF0C\u5931\u8D25rejected\uFF0C\u7B49\u5F85pedding</li><li>Promise \u72B6\u6001\u4E00\u65E6\u53D1\u751F\u6539\u53D8\uFF0C\u5C31\u4E0D\u80FD\u5728\u6539\u53D8\uFF0C\u72B6\u6001\u4E0D\u53EF\u9006 \u7528\u6237\u53EF\u81EA\u5B9A\u4E49\u6210\u529F\u7684\u6570\u636E\u53CA\u5931\u8D25\u7684\u539F\u56E0</li><li>Promise \u5B9E\u4F8B\u62E5\u6709\u4E00\u4E2Athen\u65B9\u6CD5\u3002\u63A5\u53D7\u4E24\u4E2A\u53C2\u6570\uFF0C\u4E00\u4E2A\u6210\u529F\u56DE\u8C03\uFF0C\u4E00\u4E2A\u5931\u8D25\u56DE\u8C03</li><li>executor\u6267\u884C\u5668\u5728\u6267\u884C\u8FC7\u7A0B\u4E2D\uFF0C\u53EF\u80FD\u4F1A\u629B\u51FA\u5F02\u5E38 throw new Error(),\u9700\u8981 try catch \u6355\u83B7</li><li>\u5F53\u6267\u884C\u5668\u4E2D\u7684\u662F\u5F02\u6B65\u4EE3\u7801\u65F6(\u5982\u5B9A\u65F6\u5668\u6267\u884Cresolve),\u4E0D\u662F\u7ACB\u5373\u6267\u884C \u72B6\u6001\u4E0D\u4F1A\u53D8\u66F4,\u6B64\u65F6then\u65B9\u6CD5\u4E2D\u72B6\u6001\u4ECD\u7136\u662Fpending</li><li>\u4E00\u4E2A promise \u5B9E\u4F8B\u53EF\u4EE5\u88AB then \u591A\u6B21\uFF0C\u5206\u522B\u521B\u5EFA\u4E00\u4E2A\u961F\u5217\u7528\u6765\u5B58\u653E\u6210\u529F\u548C\u5931\u8D25\u56DE\u8C03\u4E8B\u4EF6</li><li>\u5B9A\u65F6\u5668\u6267\u884C\u65F6\uFF0C\u5224\u65AD\u72B6\u6001\u4E3A pending\uFF0C\u975E\u7ACB\u5373\u6267\u884C\uFF0C\u800C\u662F\u5148\u5B58\u653E \u6210\u529F/\u5931\u8D25 \u56DE\u8C03\u4E8B\u4EF6</li><li>\u7B49\u5F85\u72B6\u6001\u53D8\u4E3A\u6210\u529F\u6216\u5931\u8D25\u65F6\u904D\u5386\u961F\u5217\u4F9D\u6B21\u6267\u884C\u5BF9\u5E94\u7684onfulfilled\u548Conrejected,\u5E76\u4E14\u6709\u6267\u884C\u987A\u5E8F</li><li>Promise \u5B9E\u73B0\u94FE\u5F0F\u8C03\u7528\uFF0C\u8FD4\u56DE\u7684\u5E76\u4E0D\u662Fthis\uFF0C\u800C\u662F\u4E00\u4E2A\u65B0\u7684promise\u5B9E\u4F8B\uFF0C \u56E0\u4E3A\u539F\u6709\u7684promise\u72B6\u6001\u4E00\u65E6\u53D1\u751F\u6539\u53D8\uFF0C\u5C31\u4E0D\u80FD\u518D\u6539\u53D8\uFF0C\u5426\u5219\u4E0D\u7B26\u5408\u89C4\u8303</li><li>Promise \u6210\u529F\u548C\u5931\u8D25\u7684\u56DE\u8C03\u7684\u8FD4\u56DE\u503C\uFF0C\u53EF\u4EE5\u4F20\u9012\u7ED9\u4E0B\u4E00\u6B21\u7684\u7684then <ul><li>\u8FD4\u56DE\u7684\u662F\u666E\u901A\u503C\uFF1A\u4E0D\u8BBAthen\u662F\u6210\u529F\u8FD8\u662F\u5931\u8D25\u3002\u53EA\u8981\u662F\u666E\u901A\u503C\u5C31\u4F20\u9012\u5230\u4E0B\u4E00\u6B21then\u7684\u6210\u529F\u4E2D\u3002(\u666E\u901A\u503C\u5305\u62EC\uFF1A\u975E\u9519\u8BEF\u975Epromise\uFF0C\u5305\u62EC\u5BF9\u8C61\uFF09</li><li>\u62A5\u9519\u6216\u5F02\u5E38\uFF1A\u4E00\u5B9A\u4F1A\u8D70\u5230\u4E0B\u4E00\u6B21then\u7684\u5931\u8D25\u4E2D\u3002\u5982\u679C\u79BB\u81EA\u5DF1\u6700\u8FD1\u7684then\u6CA1\u6709\u9519\u8BEF\u5904\u7406\uFF0C\u4F1A\u5411\u4E0B\u627E</li><li>\u7279\u522B\u6CE8\u610F: return new Error()\u8FD4\u56DE\u7684\u662F\u9519\u8BEF\u5BF9\u8C61\uFF0C\u5C5E\u4E8E\u666E\u901A\u503C\u8D70\u4E0B\u4E00\u6B21then\u7684\u6210\u529F\uFF0C\u800Cthrow new Error() \u662F\u629B\u51FA\u5F02\u5E38\uFF0C\u9700\u8981try catch \u4F1A\u8D70\u4E0B\u4E00\u6B21\u7684\u5931\u8D25</li><li>\u8FD4\u56DE\u7684\u662Fpromise\uFF1A\u4F1A\u91C7\u7528promise\u7684\u72B6\u6001\uFF0C\u51B3\u5B9A\u4E0B\u4E00\u6B21then\u662F\u6210\u529F\u8FD8\u662F\u5931\u8D25\uFF0C\u6B64\u5904\u4F1A\u6709\u9012\u5F52\u5224\u65AD</li><li>\u603B\u7ED3: \u5982\u679C\u8FD4\u56DE\u4E00\u4E2A\u666E\u901A\u503C\uFF0C\u9664\u4E86promise \uFF0C\u5C31\u4F20\u9012\u7ED9\u4E0B\u4E00\u4E2Athen\u7684\u6210\u529F\uFF0C\u5982\u679C\u8FD4\u56DE\u4E00\u4E2A\u5931\u8D25\u7684promise\u6216\u8005\u629B\u51FA\u5F02\u5E38\uFF0C\u4F1A\u8D70\u4E0B\u4E00\u4E2Athen\u7684\u5931\u8D25\u3002</li></ul></li><li>Promise \u503C\u7684\u7A7F\u900F\uFF0C\u5F53\u4E00\u4E2Apromise\u8FDE\u7EEDthen \u591A\u6B21\uFF0C\u5E76\u4E14then\u4E2D\u6CA1\u6709\u8FD4\u56DE\u4EFB\u4F55\u503C\u65F6\uFF0C\u6B64\u65F6data\u4F1A\u7A7F\u900F\u81F3\u6700\u540E\u4E00\u4E2Athen\u4E2D <ul><li>\u6267\u884Confulfilled\u65F6\uFF0C\u5148\u5224\u65AD\u662F\u4E0D\u662F\u4E00\u4E2Afunction\uFF0C\u5982\u679C\u662F\u5C31\u76F4\u63A5\u6267\u884C\uFF0C\u53CD\u4E4B\u5C31\u5305\u4E00\u5C42\u51FD\u6570</li><li>\u6267\u884Conrejected\u65F6\uFF0C\u5148\u5224\u65AD\u662F\u4E0D\u662F\u4E00\u4E2Afunction\uFF0C\u5982\u679C\u662F\u5C31\u76F4\u63A5\u6267\u884C\uFF0C\u53CD\u4E4B\u5C31\u629B\u51FA\u5931\u8D25\u5F02\u5E38</li></ul></li><li>\u65E2\u7136promise\u662F\u4E3A\u4E86\u89E3\u51B3\u5F02\u6B65\u56DE\u8C03\u51FD\u6570\u5D4C\u5957\u95EE\u9898\uFF0C\u90A3\u4E48\u53EF\u4EE5\u901A\u8FC7promise\u7684\u5EF6\u8FDF\u5BF9\u8C61\u6765\u51CF\u5C11\u4E00\u5C42\u5D4C\u5957\u5173\u7CFB</li><li>promiseA+ \u89C4\u8303\u6D4B\u8BD5</li><li>\u804A\u70B9\u89C4\u8303\u4EE5\u5916\u7684\u4E1C\u4E1C\u5427~~catch, finally,resolve,reject,all,race,\u5C31\u8FD9\u4E48\u591A</li></ul><h2 id="mypromise\u7684\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#mypromise\u7684\u5B9E\u73B0" aria-hidden="true">#</a> myPromise\u7684\u5B9E\u73B0</h2><p>\u4E0B\u9762\u5C31\u6765\u5B9E\u73B0\u4EE5\u4E0A\u8981\u70B9</p><p>myPromise \u2014 \u5B9E\u73B0\u7B80\u5355\u7684\u540C\u6B65 myPromise.js</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \u8981\u70B9 3: \u6709\u4E09\u79CD\u72B6\u6001, \u76F8\u5F53\u4E8E\u662F\u5E38\u91CF\uFF0C\u53EF\u4EE5\u653E\u5728\u5916\u9762</span>
<span class="token keyword">const</span> <span class="token constant">RESOLVED</span> <span class="token operator">=</span> <span class="token string">&#39;RESOLVED&#39;</span>
<span class="token keyword">const</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">&#39;REJECTED&#39;</span>
<span class="token keyword">const</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">&#39;PENDING&#39;</span>
<span class="token comment">// \u8981\u70B9 1: Promise \u5C31\u662F\u4E00\u4E2A\u7C7B</span>
<span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u8981\u70B9 2: \u63A5\u6536\u4E00\u4E2A\u51FD\u6570executor\u4F5C\u4E3A\u53C2\u6570\uFF0C\u7ACB\u5373\u6267\u884C</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">PENDING</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">undefined</span> <span class="token comment">// \u8981\u70B9 5: \u7528\u6237\u53EF\u81EA\u5B9A\u4E49 \u6210\u529F\u7684\u6570\u636E</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> <span class="token keyword">undefined</span> <span class="token comment">// \u8981\u70B9 5: \u7528\u6237\u53EF\u81EA\u5B9A\u4E49 \u5931\u8D25\u7684\u539F\u56E0</span>
    <span class="token keyword">let</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u8981\u70B9 4: \u72B6\u6001\u4E0D\u53EF\u9006, \u53EA\u6709PENDING\u65F6\uFF0C\u624D\u53EF\u4EE5\u6539\u53D8\u72B6\u6001</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value <span class="token comment">// \u6210\u529F\u7684\u6570\u636E</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">RESOLVED</span> <span class="token comment">// \u72B6\u6001\u7F6E\u4E3A RESOLVED</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> <span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u8981\u70B9 4: \u72B6\u6001\u4E0D\u53EF\u9006, \u53EA\u6709PENDING\u65F6\uFF0C\u624D\u53EF\u4EE5\u6539\u53D8\u72B6\u6001</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> reason <span class="token comment">// \u5931\u8D25\u7684\u539F\u56E0</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">REJECTED</span> <span class="token comment">// \u72B6\u6001\u7F6E\u4E3A REJECTED</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u8981\u70B9 7: \u9519\u8BEF\u5904\u7406\uFF0C\u629B\u51FA\u5F02\u5E38 throw new Error()</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token comment">// \u7ACB\u5373\u6267\u884C</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u629B\u51FA\u5F02\u5E38 \u76F4\u63A5\u5931\u8D25</span>
      <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// \u8981\u70B9 6: \u62E5\u6709\u4E00\u4E2Athen\u65B9\u6CD5(\u5B9E\u4F8B\u4E0A\u7684\u65B9\u6CD5)\u3002\u63A5\u53D7\u4E24\u4E2A\u53C2\u6570\u56DE\u8C03\u51FD\u6570</span>
  <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onfulfilled<span class="token punctuation">,</span> onrejected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">RESOLVED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">onfulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">onrejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Commonjs\u89C4\u8303\u5BFC\u51FA\u6A21\u5757</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Promise
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>test.js \u7B80\u5355\u7684\u540C\u6B65\u64CD\u4F5C\u9A8C\u8BC1</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \u4F7F\u7528\u81EA\u5DF1\u7684promise,\u6CE8\u91CA\u8BE5\u884C\u4EE3\u7801\uFF0C\u5C31\u662F\u539F\u751Fpromise</span>
<span class="token keyword">let</span> Promise <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./myPromise&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;\u6210\u529F&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// throw new Error(&#39;\u5931\u8D25\u4E86&#39;)</span>
  <span class="token comment">// reject(&#39;\u5931\u8D25&#39;)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mypromise-\u2014-\u589E\u52A0\u5F02\u6B65\u529F\u80FD" tabindex="-1"><a class="header-anchor" href="#mypromise-\u2014-\u589E\u52A0\u5F02\u6B65\u529F\u80FD" aria-hidden="true">#</a> myPromise \u2014 \u589E\u52A0\u5F02\u6B65\u529F\u80FD</h2><p>\u5728\u5B9E\u73B0\u4E86\u7B80\u5355\u7684\u540C\u6B65\u64CD\u4F5C\u540E\uFF0C\u518D\u6765\u770B\u770B\u5F02\u6B65\u4EE3\u7801\u7684\u6267\u884C\uFF0C\u8FD8\u662F\u4F7F\u7528\u4E0A\u9762 test \u4E2D\u7684\u6848\u4F8B\uFF0C\u7B80\u5355\u7684\u6539\u9020\u4E00\u4E0B\uFF0C\u5199\u4E00\u4E2A\u5B9A\u65F6\u5668\u6A21\u62DF\u5F02\u6B65\u73AF\u5883\uFF0Ctest.js\uFF1A\u589E\u52A0\u5F02\u6B65\u529F\u80FD\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;\u6210\u529F&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// \u4E00\u4E2A\u5B9E\u4F8B\u53EF\u4EE5then\u591A\u6B21\uFF0C\u6267\u884C\u7ED3\u679C\u4F1A\u662F\u4E00\u6837\u7684\uFF0C\u56E0\u4E3A\u72B6\u6001\u5DF2\u7ECF\u56FA\u5B9A</span>
p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>myPromise.js</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">RESOLVED</span> <span class="token operator">=</span> <span class="token string">&#39;RESOLVED&#39;</span>
<span class="token keyword">const</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">&#39;REJECTED&#39;</span>
<span class="token keyword">const</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">&#39;PENDING&#39;</span>
<span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">PENDING</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">undefined</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> <span class="token keyword">undefined</span>
    <span class="token comment">// \u8981\u70B9 9: \u5206\u522B\u521B\u5EFA\u4E00\u4E2A\`\u961F\u5217\u7528\u6765\u5B58\u653E\u6210\u529F\u548C\u5931\u8D25\u56DE\u8C03\u4E8B\u4EF6</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>onfulfilledCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>onrejectedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">RESOLVED</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>onfulfilledCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// \u8981\u70B9 11: \u72B6\u6001\u53D8\u4E3A\u6210\u529F\u65F6\u904D\u5386\u961F\u5217\u4F9D\u6B21\u6267\u884C</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> <span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> reason
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">REJECTED</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>onrejectedCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// \u8981\u70B9 11: \u72B6\u6001\u53D8\u4E3A\u5931\u8D25\u65F6\u904D\u5386\u961F\u5217\u4F9D\u6B21\u6267\u884C</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onfulfilled<span class="token punctuation">,</span> onrejected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">RESOLVED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">onfulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">onrejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// console.log(this.status)   // PENDING</span>
    <span class="token comment">// \u8981\u70B9 8: \u5B9A\u65F6\u5668\u6267\u884Cresolve\u65F6,\u72B6\u6001\u4ECD\u7136\u662Fpending</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u8981\u70B9 10: \u4E00\u4E2A promise \u5B9E\u4F8B\u53EF\u4EE5\u88AB then \u591A\u6B21\uFF0C\u5B58\u653E \u6210\u529F\u56DE\u8C03\u4E8B\u4EF6</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>onfulfilledCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">onfulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token comment">// \u8981\u70B9 10: \u4E00\u4E2A promise \u5B9E\u4F8B\u53EF\u4EE5\u88AB then \u591A\u6B21\uFF0C\u5B58\u653E \u5931\u8D25\u56DE\u8C03\u4E8B\u4EF6</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>onrejectedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">onrejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// Commonjs\u89C4\u8303\u5BFC\u51FA\u6A21\u5757</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Promise
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mypromise-\u2014-\u94FE\u5F0F\u8C03\u7528-\u91CD\u96BE\u70B9-\u4E0D\u597D\u7406\u89E3" tabindex="-1"><a class="header-anchor" href="#mypromise-\u2014-\u94FE\u5F0F\u8C03\u7528-\u91CD\u96BE\u70B9-\u4E0D\u597D\u7406\u89E3" aria-hidden="true">#</a> myPromise \u2014 \u94FE\u5F0F\u8C03\u7528(\u91CD\u96BE\u70B9\uFF0C\u4E0D\u597D\u7406\u89E3)</h2><p>\u94FE\u5F0F\u8C03\u7528\u8FD9\u4E00\u90E8\u5206\uFF0C\u6BD4\u8F83\u7ED5\uFF0C\u4E0D\u592A\u597D\u7406\u89E3\uFF0C\u6211\u7684\u8001\u5E08\u9F13\u52B1\u6211\uFF0C\u8BF4:\u201C\u4E66\u8BFB\u767E\u904D,\u5176\u4E49\u81EA\u73B0\u201D,\u54C8\u54C8\u54C8\uFF0C\u73B0\u5728\u7528\u6765\u9F13\u52B1\u5927\u5BB6\u5427\uFF01\uFF01\uFF01test.js\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> Promise <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./myPromise&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;\u6210\u529F&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// \u53EF\u4EE5\u5206\u522B\u6CE8\u91CA\u7528\u4F8B\u4EE3\u7801,\u8FDB\u884C\u6548\u679C\u6F14\u793A</span>
p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> data <span class="token comment">// \u7528\u4F8B1. \u8FD4\u56DE\u7684\u662F\u666E\u901A\u503C: \u2018\u6210\u529F\u2019</span>
  <span class="token comment">// throw new Error()     // \u7528\u4F8B2. \u62A5\u9519\u6216\u5F02\u5E38: \u629B\u51FA\u5F02\u5E38\uFF0C\u4F1A\u76F4\u63A5\u8D70\u4E0B\u4E00\u6B21then\u7684\u5931\u8D25</span>
  <span class="token comment">// return new Error()    // \u7528\u4F8B3. \u8FD4\u56DE\u7684\u662F\u666E\u901A\u503C: error\u5BF9\u8C61\uFF0C\u9700\u8981\u7279\u522B\u6CE8\u610F</span>
  <span class="token comment">// return new Promise((s,j)=&gt;s(1))    // \u7528\u4F8B4. \u8FD4\u56DE\u7684\u662Fpromise: \u4F1A\u4F20\u9012\u5F53\u524Dpromise\u7684\u5DF2\u6210\u529F\u7ED3\u679C</span>
  <span class="token comment">// return new Promise((s,j)=&gt;j(1))    // \u7528\u4F8B5. \u8FD4\u56DE\u7684\u662Fpromise: \u4F1A\u4F20\u9012\u5F53\u524Dpromise\u7684\u5DF2\u5931\u8D25\u7ED3\u679C</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// \u6267\u884C\u7ED3\u679C\uFF1A\u7528\u4F8B1, \u7528\u4F8B3, \u7528\u4F8B4</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// \u6267\u884C\u7ED3\u679C\uFF1A\u7528\u4F8B2, \u7528\u4F8B5</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 1. \u8FD4\u56DE\u7684\u662F\u666E\u901A\u503C\uFF1A\u4E0D\u8BBAthen\u662F\u6210\u529F\u8FD8\u662F\u5931\u8D25\u3002\u53EA\u8981\u662F\u666E\u901A\u503C\u5C31\u4F20\u9012\u5230\u4E0B\u4E00\u6B21then\u7684\u6210\u529F\u4E2D\u3002(\u666E\u901A\u503C\u5305\u62EC\uFF1A\u975E\u9519\u8BEF\u975Epromise\uFF0C\u5305\u62EC\u5BF9\u8C61\uFF09</span>
<span class="token comment">// 2. \u62A5\u9519\u6216\u5F02\u5E38\uFF1A\u4E00\u5B9A\u4F1A\u8D70\u5230\u4E0B\u4E00\u6B21then\u7684\u5931\u8D25\u4E2D\u3002\u5982\u679C\u79BB\u81EA\u5DF1\u6700\u8FD1\u7684then\u6CA1\u6709\u9519\u8BEF\u5904\u7406\uFF0C\u4F1A\u5411\u4E0B\u627E</span>
<span class="token comment">// 3. \u7279\u522B\u6CE8\u610F: return new Error()\u8FD4\u56DE\u7684\u662F\u9519\u8BEF\u5BF9\u8C61\uFF0C\u5C5E\u4E8E\u666E\u901A\u503C\u8D70\u4E0B\u4E00\u6B21then\u7684\u6210\u529F\uFF0C\u800Cthrow new Error() \u662F\u629B\u51FA\u5F02\u5E38\uFF0C\u4F1A\u8D70\u4E0B\u4E00\u6B21\u7684\u5931\u8D25</span>
<span class="token comment">// 4. \u8FD4\u56DE\u7684\u662Fpromise\uFF1A\u4F1A\u91C7\u7528promise\u7684\u72B6\u6001\uFF0C\u51B3\u5B9A\u4E0B\u4E00\u6B21then\u662F\u6210\u529F\u8FD8\u662F\u5931\u8D25\uFF0C\u6B64\u5904\u4F1A\u6709\u9012\u5F52\u5224\u65AD</span>
<span class="token comment">// 5. \u603B\u7ED3: \u5982\u679C\u8FD4\u56DE\u4E00\u4E2A\u666E\u901A\u503C\uFF0C\u9664\u4E86promise \uFF0C\u5C31\u4F20\u9012\u7ED9\u4E0B\u4E00\u4E2Athen\u7684\u6210\u529F\uFF0C\u5982\u679C\u8FD4\u56DE\u4E00\u4E2A\u5931\u8D25\u7684promise\u6216\u8005\u629B\u51FA\u5F02\u5E38(try catch)\uFF0C\u4F1A\u8D70\u4E0B\u4E00\u4E2Athen\u7684\u5931\u8D25</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>myPromise.js</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">RESOLVED</span> <span class="token operator">=</span> <span class="token string">&#39;RESOLVED&#39;</span>
<span class="token keyword">const</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">&#39;REJECTED&#39;</span>
<span class="token keyword">const</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">&#39;PENDING&#39;</span>
<span class="token keyword">const</span> <span class="token function-variable function">resolvePromise</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>promise2 <span class="token operator">===</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u9632\u6B62\u81EA\u5DF1\u7B49\u5F85\u81EA\u5DF1 \u4E00\u76F4\u5FAA\u73AF\u7B49\u5F85 </span>
    <span class="token comment">// \u539F\u751F\u8FD4\u56DE\uFF1Areturn reject(new TypeError(&#39;TypeError: Chaining cycle detected for promise #&lt;Promise&gt;&#39;))</span>
    <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&#39;\u6211\u4EEC\u81EA\u5DF1\u62A5\u7684\u9519\uFF1A\u5FAA\u73AF\u5F15\u7528\u62A5\u9519&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> called<span class="token punctuation">;</span> <span class="token comment">// \u4E3A\u4E86\u517C\u5BB9\u5176\u4ED6promise \u5E93\u7B26\u5408a+\u89C4\u8303\uFF0C\u9632\u6B62\u72B6\u6001\u6539\u53D8\u540E\u518D\u6B21\u88AB\u8C03\u7528</span>
  <span class="token comment">// \u8003\u8651\u5176\u4ED6promise\u5E93\u517C\u5BB9\u95EE\u9898\uFF1A\u5224\u65ADx\u662F\u4E0D\u662Fpromise\uFF1A\u4E0D\u662Fnull\u7684\u5BF9\u8C61  || \u51FD\u6570  </span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token comment">// \u4E3A\u9632\u6B62then\u65F6 \u51FA\u73B0\u5F02\u5E38\uFF0CObject.defineProperty</span>
      <span class="token keyword">let</span> then <span class="token operator">=</span> x<span class="token punctuation">.</span>then <span class="token comment">// \u53D6x \u7684then \u65B9\u6CD5 </span>
      <span class="token doc-comment comment">/**
       * \u53EF\u80FD\u5BF9\u8C61\u662F<span class="token punctuation">{</span>then:<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>\uFF0C\u8FD8\u9700\u8981\u5224\u65ADthen\u662F\u5426\u662F\u51FD\u6570\uFF0C
       * \u662F\u51FD\u6570\u5C31\u8BA4\u4E3A\u662Fpromise\uFF0C\u5E76\u8C03\u7528then\u65B9\u6CD5
       */</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> then <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// call\u7B2C\u4E00\u4E2A\u53C2\u6570\u662Fthis,\u540E\u9762\u7684\u662F\u6210\u529F\u56DE\u8C03 \u548C \u5931\u8D25\u56DE\u8C03</span>
        <span class="token comment">// \u5982\u679C\u6210\u529F\u56DE\u8C03\u8FD4\u56DE\u503C y \u4ECD\u7136\u662Fpromise,\u5C31\u7EE7\u7EED\u9012\u5F52\u89E3\u6790promise,\u89E3\u6790\u5230\u8FD4\u56DE\u503C\u4E0D\u662F\u4E00\u4E2APromise\u7C7B\u578B\u4E3A\u6B62</span>
        <span class="token comment">// promise2\u80FD\u5426\u6210\u529F\uFF0C\u662F\u6839\u636Ex\u7684\u503C\u6765\u5B9A\u7684\uFF0Cx\u662Fpromise\uFF0C\u90A3\u4E48\u5C31\u8981\u7B49\u5230x\u5B8C\u6210\uFF0Cx\u5B8C\u6210\u540E\uFF0C\u5982\u679C\u8FD4\u56DEy\u53C8\u662Fpromise\uFF0C\u90A3promise2\u53C8\u8981\u7B49\u5230y\u5B8C\u6210</span>
        <span class="token function">then</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token parameter">y</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span>
          called <span class="token operator">=</span> <span class="token boolean">true</span>
          <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> y<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span>
          called <span class="token operator">=</span> <span class="token boolean">true</span>
          <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5426\u5219\u5C31\u8BA4\u4E3A then \u662F\u4E00\u4E2A\u666E\u901A\u5BF9\u8C61\uFF0C\u6210\u529F\u5373\u53EF</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span>
      called <span class="token operator">=</span> <span class="token boolean">true</span>
      <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token comment">// \u51FA\u73B0\u5F02\u5E38,\u76F4\u63A5\u8D70\u5931\u8D25\u903B\u8F91</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// x \u4E3A\u666E\u901A\u503C</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">PENDING</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">undefined</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> <span class="token keyword">undefined</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>onfulfilledCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>onrejectedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">RESOLVED</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>onfulfilledCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> <span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> reason
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">REJECTED</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>onrejectedCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onfulfilled<span class="token punctuation">,</span> onrejected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u8981\u70B9 12: then\u94FE\u5F0F\u8C03\u7528\uFF0C\u8FD4\u56DE\u7684\u5E76\u4E0D\u662Fthis\uFF0C\u800C\u662F\u4E00\u4E2A\`\u65B0\u7684promise\u5B9E\u4F8B\`</span>
    <span class="token keyword">let</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// new Promise\u6267\u884C\u5668\u4E2D\u7684\u4EE3\u7801\u662F\u7ACB\u5373\u6267\u884C\uFF0C\u56E0\u6B64\u6CA1\u6709\u5F71\u54CD</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">RESOLVED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u52A0\u5B9A\u65F6\u5668\u662F\u56E0\u4E3A\u5728\u5F53\u524D\u6267\u884C\u4E0A\u4E0B\u6587\u4E2D\uFF0C\u4E0D\u80FD\u83B7\u53D6promise2\u7684\u503C</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token comment">// \u8981\u70B913.2. \u7528\u4E8E\u62A5\u9519\u6216\u629B\u51FA\u5F02\u5E38\u5904\u7406\uFF0C\u4EE5\u4E0B\u540C\u7406</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u8981\u70B913\uFF1A\u5B58\u50A8\u7B2C\u4E00\u6B21then\u7684\u56DE\u8C03\u7ED3\u679C\u8FD4\u56DE\u503C\uFF0C\u7528\u4E8E\u4E0B\u6B21then\u7684\u53C2\u6570\u4F20\u9012\uFF0C\u4EE5\u4E0Blet x \u540C\u7406</span>
            <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onfulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
            <span class="token comment">// \u8981\u70B913.3: x \u53EF\u80FD\u4F1A\u662F\u4E00\u4E2Apromise, \u9700\u8981\u5355\u72EC\u5904\u7406\uFF0C</span>
            <span class="token comment">// \u5E76\u5C06promise2\u3001\u65B0\u7684\u8FD4\u56DE\u503C\uFF1Ax \u3001\u6210\u529F\u56DE\u8C03resolve  \u5931\u8D25\u56DE\u8C03reject \u4F5C\u4E3A\u53C2\u6570\u4F20\u9012</span>
            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u8981\u70B913.2. \u62A5\u9519\u6216\u629B\u51FA\u5F02\u5E38\u5904\u7406\uFF0C\u76F4\u63A5\u8D70promise2\u7684reject\uFF0C\u4EE5\u4E0B\u540C\u7406</span>
            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// \u4EE5\u4E0B\u903B\u8F91\u540C\u7406</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onrejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>
            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u6682\u5B58\u6210\u529F\u56DE\u8C03\u961F\u5217</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>onfulfilledCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
              <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onfulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
              <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token comment">// \u6682\u5B58\u5931\u8D25\u56DE\u8C03\u961F\u5217</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>onrejectedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
              <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onrejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>
              <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> promise2 <span class="token comment">// \u8981\u70B9 12: \u8FD4\u56DE\u4E00\u4E2A\u65B0\u7684promise\u5B9E\u4F8B</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Commonjs\u89C4\u8303\u5BFC\u51FA\u6A21\u5757</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Promise
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mypromise-\u2014-\u503C\u7684\u900F\u4F20" tabindex="-1"><a class="header-anchor" href="#mypromise-\u2014-\u503C\u7684\u900F\u4F20" aria-hidden="true">#</a> myPromise \u2014 \u503C\u7684\u900F\u4F20</h2><p>Promise \u503C\u7684\u7A7F\u900F\uFF0C\u5F53\u4E00\u4E2Apromise\u8FDE\u7EEDthen\u591A\u6B21 \uFF0C\u5E76\u4E14then\u4E2D\u6CA1\u6709\u8FD4\u56DE\u4EFB\u4F55\u503C\u65F6\uFF0C\u6B64\u65F6data\u4F1A\u7A7F\u900F\u503C\u6700\u540E\u4E00\u4E2Athen\u4E2Dtest.js\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//\u539F\u751F\u65B9\u6CD5\uFF1A\u503C\u7684\u7A7F\u900F \u6F14\u793A</span>
<span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token comment">// reject(2)   // \u540C\u7406</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// ----------------------------------------------------------</span>

<span class="token comment">//myPromise\uFF1A\u57FA\u4E8E\u4EE5\u4E0A\u51E0\u90E8\u5206\u7684\u5B9E\u73B0\uFF0C\u6211\u4EEC\u81EA\u5DF1\u7684promise\u662F\u4E0D\u652F\u6301\u7A7F\u900F\u7684\uFF0C\u90A3\u4E48\u770B\u4E00\u4E0B\u6F14\u53D8\u8FC7\u7A0B\uFF0C\u5C31\u5F88\u5BB9\u6613\u5199\u51FA\u7B26\u5408\u89C4\u8303\u7684\u900F\u4F20</span>
<span class="token keyword">const</span> Promise <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./myPromise&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// \u540C\u7406\uFF0C</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// \u76F8\u5F53\u4E8E, \u5565\u90FD\u4E0D\u5199\u65F6\uFF0C\u611F\u89C9\u50CF\u662F\u9ED8\u8BA4\u5B9A\u4E49\u4E86\u4E00\u4E2A\u51FD\u6570\uFF0C\u4E0D\u505C\u5411\u4E0B\u4F20\u9012\uFF0C\u53BB\u5B9E\u73B0\u4E00\u4E0B\u5427~</span>
p1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> data<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> data<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// \u76F8\u5F53\u4E8E, throw err\uFF0C\u4E0D\u505C\u5411\u4E0B\u4F20\u9012</span>
p2<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> err
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">throw</span> err
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>myPromise.js</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">RESOLVED</span> <span class="token operator">=</span> <span class="token string">&#39;RESOLVED&#39;</span>
<span class="token keyword">const</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">&#39;REJECTED&#39;</span>
<span class="token keyword">const</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">&#39;PENDING&#39;</span>
<span class="token keyword">const</span> <span class="token function-variable function">resolvePromise</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>promise2 <span class="token operator">===</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u9632\u6B62\u81EA\u5DF1\u7B49\u5F85\u81EA\u5DF1 \u4E00\u76F4\u5FAA\u73AF\u7B49\u5F85</span>
    <span class="token comment">// \u539F\u751F\u8FD4\u56DE\uFF1Areturn reject(new TypeError(&#39;TypeError: Chaining cycle detected for promise #&lt;Promise&gt;&#39;))</span>
    <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&#39;\u6211\u4EEC\u81EA\u5DF1\u62A5\u7684\u9519\uFF1A\u5FAA\u73AF\u5F15\u7528\u62A5\u9519&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> called<span class="token punctuation">;</span> <span class="token comment">// \u4E3A\u4E86\u517C\u5BB9\u5176\u4ED6promise \u5E93\u7B26\u5408a+\u89C4\u8303\uFF0C\u9632\u6B62\u72B6\u6001\u6539\u53D8\u540E\u518D\u6B21\u88AB\u8C03\u7528</span>
  <span class="token comment">// \u8003\u8651\u5176\u4ED6promise\u5E93\u517C\u5BB9\u95EE\u9898\uFF1A\u5224\u65ADx\u662F\u4E0D\u662Fpromise\uFF1A\u4E0D\u662Fnull\u7684\u5BF9\u8C61  || \u51FD\u6570</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token comment">// \u4E3A\u9632\u6B62then\u65F6 \u51FA\u73B0\u5F02\u5E38\uFF0CObject.defineProperty</span>
      <span class="token keyword">let</span> then <span class="token operator">=</span> x<span class="token punctuation">.</span>then <span class="token comment">// \u53D6x \u7684then \u65B9\u6CD5</span>
      <span class="token doc-comment comment">/**
       * \u53EF\u80FD\u5BF9\u8C61\u662F<span class="token punctuation">{</span>then:<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>\uFF0C\u8FD8\u9700\u8981\u5224\u65ADthen\u662F\u5426\u662F\u51FD\u6570\uFF0C
       * \u662F\u51FD\u6570\u5C31\u8BA4\u4E3A\u662Fpromise\uFF0C\u5E76\u8C03\u7528then\u65B9\u6CD5
       */</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> then <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// call\u7B2C\u4E00\u4E2A\u53C2\u6570\u662Fthis,\u540E\u9762\u7684\u662F\u6210\u529F\u56DE\u8C03 \u548C \u5931\u8D25\u56DE\u8C03</span>
        <span class="token comment">// \u5982\u679C\u6210\u529F\u56DE\u8C03\u8FD4\u56DE\u503C y \u4ECD\u7136\u662Fpromise,\u5C31\u7EE7\u7EED\u9012\u5F52\u89E3\u6790promise,\u89E3\u6790\u5230\u8FD4\u56DE\u503C\u4E0D\u662F\u4E00\u4E2APromise\u7C7B\u578B\u4E3A\u6B62</span>
        <span class="token comment">// promise2\u80FD\u5426\u6210\u529F\uFF0C\u662F\u6839\u636Ex\u7684\u503C\u6765\u5B9A\u7684\uFF0Cx\u662Fpromise\uFF0C\u90A3\u4E48\u5C31\u8981\u7B49\u5230x\u5B8C\u6210\uFF0Cx\u5B8C\u6210\u540E\uFF0C\u5982\u679C\u8FD4\u56DEy\u53C8\u662Fpromise\uFF0C\u90A3promise2\u53C8\u8981\u7B49\u5230y\u5B8C\u6210</span>
        <span class="token function">then</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token parameter">y</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span>
          called <span class="token operator">=</span> <span class="token boolean">true</span>
          <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> y<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span>
          called <span class="token operator">=</span> <span class="token boolean">true</span>
          <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5426\u5219\u5C31\u8BA4\u4E3A then \u662F\u4E00\u4E2A\u666E\u901A\u5BF9\u8C61\uFF0C\u6210\u529F\u5373\u53EF</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span>
      called <span class="token operator">=</span> <span class="token boolean">true</span>
      <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token comment">// \u51FA\u73B0\u5F02\u5E38,\u76F4\u63A5\u8D70\u5931\u8D25\u903B\u8F91</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// x \u4E3A\u666E\u901A\u503C</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">PENDING</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">undefined</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> <span class="token keyword">undefined</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>onfulfilledCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>onrejectedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">RESOLVED</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>onfulfilledCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> <span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> reason
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">REJECTED</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>onrejectedCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onfulfilled<span class="token punctuation">,</span> onrejected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// onfulfilled \u662F\u51FD\u6570\u5C31\u6267\u884C\uFF0C\u4E0D\u662F\u51FD\u6570\u5305\u4E00\u5C42\u51FD\u6570\u5E76\u76F4\u63A5\u8FD4\u56DE\u6570\u636E</span>
    onfulfilled <span class="token operator">=</span> <span class="token keyword">typeof</span> onfulfilled <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">?</span> <span class="token function-variable function">onfulfilled</span> <span class="token operator">:</span> <span class="token parameter">v</span> <span class="token operator">=&gt;</span> v<span class="token punctuation">;</span>
    <span class="token comment">// onrejected \u662F\u51FD\u6570\u5C31\u6267\u884C\uFF0C\u4E0D\u662F\u51FD\u6570\u5305\u4E00\u5C42\u51FD\u6570\u5E76\u76F4\u63A5\u629B\u51FA\u9519\u8BEF</span>
    onrejected <span class="token operator">=</span> <span class="token keyword">typeof</span> onrejected <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">?</span> <span class="token function-variable function">onrejected</span> <span class="token operator">:</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> err
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// \u8981\u70B9 12: then\u94FE\u5F0F\u8C03\u7528\uFF0C\u8FD4\u56DE\u7684\u5E76\u4E0D\u662Fthis\uFF0C\u800C\u662F\u4E00\u4E2A\`\u65B0\u7684promise\u5B9E\u4F8B\`</span>
    <span class="token keyword">let</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// new Promise\u6267\u884C\u5668\u4E2D\u7684\u4EE3\u7801\u662F\u7ACB\u5373\u6267\u884C\uFF0C\u56E0\u6B64\u6CA1\u6709\u5F71\u54CD</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">RESOLVED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u52A0\u5B9A\u65F6\u5668\u662F\u56E0\u4E3A\u5728\u5F53\u524D\u6267\u884C\u4E0A\u4E0B\u6587\u4E2D\uFF0C\u4E0D\u80FD\u83B7\u53D6promise2\u7684\u503C</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token comment">// \u8981\u70B913.2. \u7528\u4E8E\u62A5\u9519\u6216\u629B\u51FA\u5F02\u5E38\u5904\u7406\uFF0C\u4EE5\u4E0B\u540C\u7406</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u8981\u70B913\uFF1A\u5B58\u50A8\u7B2C\u4E00\u6B21then\u7684\u56DE\u8C03\u7ED3\u679C\u8FD4\u56DE\u503C\uFF0C\u7528\u4E8E\u4E0B\u6B21then\u7684\u53C2\u6570\u4F20\u9012\uFF0C\u4EE5\u4E0Blet x \u540C\u7406</span>
            <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onfulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
            <span class="token comment">// \u8981\u70B913.3: x \u53EF\u80FD\u4F1A\u662F\u4E00\u4E2Apromise, \u9700\u8981\u5355\u72EC\u5904\u7406\uFF0C</span>
            <span class="token comment">// \u5E76\u5C06promise2\u3001\u65B0\u7684\u8FD4\u56DE\u503C\uFF1Ax \u3001\u6210\u529F\u56DE\u8C03resolve  \u5931\u8D25\u56DE\u8C03reject \u4F5C\u4E3A\u53C2\u6570\u4F20\u9012</span>
            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u8981\u70B913.2. \u62A5\u9519\u6216\u629B\u51FA\u5F02\u5E38\u5904\u7406\uFF0C\u76F4\u63A5\u8D70promise2\u7684reject\uFF0C\u4EE5\u4E0B\u540C\u7406</span>
            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// \u4EE5\u4E0B\u903B\u8F91\u540C\u7406</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onrejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>
            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u6682\u5B58\u6210\u529F\u56DE\u8C03\u961F\u5217</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>onfulfilledCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
              <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onfulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
              <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token comment">// \u6682\u5B58\u5931\u8D25\u56DE\u8C03\u961F\u5217</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>onrejectedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
              <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onrejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>
              <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> promise2 <span class="token comment">// \u8981\u70B9 12: \u8FD4\u56DE\u4E00\u4E2A\u65B0\u7684promise\u5B9E\u4F8B</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Commonjs\u89C4\u8303\u5BFC\u51FA\u6A21\u5757</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Promise
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5B8C\u7F8E\u901A\u8FC7\u5B98\u65B9\u7528\u4F8B" tabindex="-1"><a class="header-anchor" href="#\u5B8C\u7F8E\u901A\u8FC7\u5B98\u65B9\u7528\u4F8B" aria-hidden="true">#</a> \u5B8C\u7F8E\u901A\u8FC7\u5B98\u65B9\u7528\u4F8B</h2><p>\u4E3A\u4E86\u6D4B\u8BD5myPromise\u5E93\uFF0C\u5FC5\u987B\u516C\u5F00\u4E00\u4E2A\u975E\u5E38\u5C0F\u7684\u9002\u914D\u5668\u63A5\u53E3\u3002\u53EF\u4EE5\u8BF4\u662Fpromise\u7684\u5EF6\u8FDF\u5BF9\u8C61defer,\u4E0B\u6587\u4F1A\u8BE6\u7EC6\u4ECB\u7ECD\uFF0C\u5404\u4F4D\u7A0D\u5B89\u52FF\u8E81\u3002</p><ul><li>\u7B2C\u4E00\u6B65\uFF1A\u627E\u5230\u6587\u4EF6\u6700\u4E0B\u9762\u3002\u52A0\u4E0A\u4E0B\u9762\u51E0\u884C\u4EE3\u7801\uFF0C</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
   *   ...
   * \u5176\u4F59\u4E0D\u53D8
   *   ...
   */</span>
<span class="token comment">// \u6D4B\u8BD5\u81EA\u5DF1\u7684\u5199\u7684promise \u662F\u5426\u7B26\u5408a+\u89C4\u8303</span>
<span class="token comment">// promise\u7684\u5EF6\u8FDF\u5BF9\u8C61</span>
Promise<span class="token punctuation">.</span>defer <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function-variable function">deferred</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> dfd <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  dfd<span class="token punctuation">.</span>promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    dfd<span class="token punctuation">.</span>resolve <span class="token operator">=</span> resolve<span class="token punctuation">;</span>
    dfd<span class="token punctuation">.</span>reject <span class="token operator">=</span> reject
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> dfd<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Promise
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>\u7B2C\u4E8C\u6B65\uFF1A\u5B89\u88C5\u6D4B\u8BD5\u5305 npm install promises-aplus-tests -g</p></li><li><p>\u7B2C\u4E09\u6B65\uFF1A\u8FDB\u5165\u5BF9\u5E94\u76EE\u5F55\u6267\u884C promises-aplus-tests ./myPromise.js</p></li></ul><h2 id="mypromise\u7684\u5EF6\u8FDF\u5BF9\u8C61defer\u7528\u6CD5" tabindex="-1"><a class="header-anchor" href="#mypromise\u7684\u5EF6\u8FDF\u5BF9\u8C61defer\u7528\u6CD5" aria-hidden="true">#</a> myPromise\u7684\u5EF6\u8FDF\u5BF9\u8C61defer\u7528\u6CD5</h2><p>promise\u662F\u4E3A\u4E86\u89E3\u51B3\u5F02\u6B65\u56DE\u8C03\u51FD\u6570\u5D4C\u5957\u95EE\u9898\uFF0C\u90A3\u4E48\u53EF\u4EE5\u901A\u8FC7promise\u7684\u5EF6\u8FDF\u5BF9\u8C61\u6765\u51CF\u5C11\u4E00\u5C42\u5D4C\u5957\u5173\u7CFB</p><ul><li>\u6A21\u62DF\u6570\u636E\u51C6\u5907\uFF0C\u51C6\u5907\u4EE5\u4E0B\u4E24\u4E2A\u6587\u4EF6\uFF1A <ul><li>name.txt\uFF1A\u6587\u4EF6\u5185\u5BB9\u662F\uFF1Aage.txt</li><li>age.txt\uFF1A\u6587\u4EF6\u5185\u5BB918</li></ul></li></ul><p>\u9700\u6C42\uFF1A\u9996\u5148\u901A\u8FC7fs\u6A21\u5757\u8BFB\u53D6\u5230name\u4E2D\u7684\u5185\u5BB9(\u8BFB\u5230\u65B0\u7684filepath)\uFF0C\u518D\u53BB\u8BFB\u53D6age.txt\u4E2D\u7684\u5185\u5BB9\u5E76\u8F93\u51FA\u3002</p><p>\u6CA1\u6709\u5EF6\u8FDF\u5BF9\u8C61\u7684\u5199\u6CD5\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> Promise <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./myPromise&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token parameter">filepath</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// \u60F3\u8981read\u65B9\u6CD5\u53EF\u4EE5\u4F7F\u7528then\u65B9\u6CD5\uFF0C\u9700\u8981\u5305\u4E00\u5C42new Promise</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span><span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&#39;./name.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token comment">// data = age.txt</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// data = age.txt</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4F7F\u7528\u5EF6\u8FDF\u5BF9\u8C61\u7684\u5199\u6CD5\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> Promise <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./myPromise&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">readDefer</span><span class="token punctuation">(</span><span class="token parameter">filepath</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> dfd <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// \u51CF\u5C11\u4E00\u5C42\u5D4C\u5957</span>
  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span><span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> dfd<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    dfd<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> dfd<span class="token punctuation">.</span>promise
<span class="token punctuation">}</span>

<span class="token function">readDefer</span><span class="token punctuation">(</span><span class="token string">&#39;./name.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">readDefer</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment">// data = age.txt</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// data = age.txt</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mypromise-catch" tabindex="-1"><a class="header-anchor" href="#mypromise-catch" aria-hidden="true">#</a> myPromise.catch</h2><p>\u5B8C\u6210\u4EE5\u4E0A\u5185\u5BB9\uFF0C\u5C31\u5DF2\u7ECF\u5B9E\u73B0\u4E86Promise A+ \u89C4\u8303\u7684\u5168\u90E8\u5185\u5BB9\uFF0C\u800C\u6211\u4EEC\u5E38\u7528\u7684catch\u53CAfinally\u5E76\u4E0D\u5C5E\u4E8E A+\u89C4\u8303\uFF0C\u540C\u6837\u53EF\u4EE5\u5B9E\u73B0\u4E00\u4E0B\uFF0Ccatch\u662F\u5C5E\u4E8E\u5B9E\u4F8B\u4E0A\u7684\u65B9\u6CD5\uFF0C\u7528\u4E8E\u51FA\u9519\u5904\u7406\u53CA\u6355\u83B7\u5F02\u5E38 \u6F14\u53D8\u8FC7\u7A0B\uFF1Atest.js</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> Promise <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./myPromise&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;\u5931\u8D25&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// \u7B2C\u4E00\u4E2Athen\u6CA1\u6709\u9519\u8BEF\u5904\u7406\u65B9\u6CD5\uFF0C\u76F4\u63A5\u4F1A\u4F20\u9012\u5230\u7B2C\u4E8C\u4E2Athen\u4E2D</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">&#39;errrrrr&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5931\u8D25 errrrrr</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// \u5C06\u4E0A\u8FF0\u4EE3\u7801\u4E2Dnull\u4F18\u5316\u4E00\u4E0B\uFF0C\u4E8E\u662F\u5C31\u6709\u4E86catch\u65B9\u6CD5</span>
<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;\u5931\u8D25&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">&#39;errrrrr&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5931\u8D25 errrrrr</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5B9E\u73B0\uFF1AmyPromise.js</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Promise</span><span class="token punctuation">{</span>
  <span class="token comment">// \u91CD\u590D\u4EE3\u7801\u7701\u7565</span>
  <span class="token comment">// constructor(){...}</span>
  <span class="token comment">// then(){...}</span>

  <span class="token keyword">catch</span><span class="token punctuation">(</span>onrejected<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// \u5B9E\u4F8B\u7684catch</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> onrejected<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * \u5176\u4F59\u91CD\u590D\u4EE3\u7801\u7701\u7565
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mypromise-finally" tabindex="-1"><a class="header-anchor" href="#mypromise-finally" aria-hidden="true">#</a> myPromise.finally</h2><p>finally\u65B9\u6CD5\u662F\u5C5E\u4E8E\u5B9E\u4F8B\u4E0A\u7684\u65B9\u6CD5.\u8868\u793A\u65E0\u8BBA\u6210\u529F\u8FD8\u662F\u5931\u8D25\uFF0C\u90FD\u4F1A\u6267\u884C\uFF0C\u5E76\u4E14\u53EF\u4EE5\u5411\u4E0B\u6267\u884C\u3002 \u7406\u89E3\u8D77\u6765\u6709\u70B9\u70B9\u7ED5\u54C8\uFF0C\u5EFA\u8BAE\u591A\u770B\u51E0\u904D\u5427\uFF0Ctest.js</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> Promise <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./myPromise&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// resolve(&#39;\u6210\u529F&#39;)  // 1</span>
    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;\u5931\u8D25&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// resolve(1000)  // 3 \u4E0D\u4F1A\u91C7\u7528promise\u6210\u529F\u7684\u7ED3\u679C\uFF0C\u4F46\u662F\u4F1A\u7B49\u5F85\u6267\u884C</span>
      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">)</span> <span class="token comment">// 4 \u4F46\u662F\u8FD4\u56DE\u4E00\u4E2A\u5931\u8D25\u7684promise\uFF0C\u4F1A\u8D70catch\uFF0C\u76F8\u5F53\u4E8Ethrow new Error</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5BF9\u5E94\u4E0A\u8FF0\u4E0D\u540C\u5E8F\u53F7\u7EC4\u5408\uFF0C\u8F93\u51FA\u7ED3\u679C\u6709\u6240\u4E0D\u540C\uFF0C\u53EF\u81EA\u884C\u7EC4\u5408\u5B9E\u9A8C\uFF0C\u4E0B\u65B9\u4E5F\u4F1A\u7ED9\u5927\u5BB6\u4F5C\u51FA\u603B\u7ED3</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token string">&#39;catch&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token doc-comment comment">/**
 * \u6574\u7406\u6D41\u7A0B\uFF1A
 * \u7EC4\u5408\uFF1A
 * 1+3\uFF1A\u6210\u529F + \u6210\u529F \uFF0C\u8D70then=&gt;data \u8FD4\u56DE 1 \u8FD4\u56DE\u7684\u6570\u636E(&#39;\u6210\u529F&#39;)
 * 1+4\uFF1A\u6210\u529F + \u5931\u8D25 \uFF0C\u8D70then=&gt;err \u629B\u51FA 4 \u8FD4\u56DE\u7684\u6570\u636E(9000)
 * 2+3\uFF1A\u5931\u8D25 + \u6210\u529F \uFF0C\u8D70then=&gt;err \u629B\u51FA 2 \u8FD4\u56DE\u7684\u6570\u636E(&#39;\u5931\u8D25&#39;)
 * 2+4\uFF1A\u5931\u8D25 + \u5931\u8D25 \uFF0C\u8D70then=&gt;err \u629B\u51FA 4 \u8FD4\u56DE\u7684\u6570\u636E(9000)
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5B9E\u73B0\uFF1AmyPromise.js</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 1. finally \u4F20\u9012\u4E86\u4E00\u4E2A\u65B9\u6CD5 callback
 * 2. finally \u65B9\u6CD5\u76F8\u5F53\u4E8E\u4E00\u4E2Athen\uFF0C\u7279\u70B9\u5C31\u662F\u5728\u51FD\u6570\u4E2D\u8FD4\u56DE\u4E00\u4E2Apromise\uFF0C\u5E76\u4F1A\u7B49\u5F85\u8FD9\u4E2Apromise\u7684\u5B8C\u6210
 * 3. Promise.resolve \u53C8\u4F1A\u7B49\u5F85 callback\u6267\u884C\u5B8C\u6210
 */</span>

<span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u91CD\u590D\u4EE3\u7801\u7701\u7565</span>
  <span class="token comment">// constructor(){...}</span>
  <span class="token comment">// then(){...}</span>
  <span class="token comment">// catch(){...}</span>
  <span class="token function">finally</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// \u6210\u529F || \u5931\u8D25 \u90FD\u4F1A\u6267\u884C</span>
      <span class="token comment">// Promise.resolve \u76EE\u7684\u662F\u7B49\u5F85cb() \u540E\u7684promise\u5B8C\u6210</span>
      <span class="token comment">// \u6210\u529F\u65F6\u8C03\u7528finally,\u76F4\u63A5\u4F20\u9012this\u5B9E\u4F8B\u6210\u529F\u7684\u6570\u636Edata\uFF0Cfinally\u65B9\u6CD5\u672C\u8EAB\u662F\u6CA1\u6709\u53C2\u6570\u7684</span>
      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u5931\u8D25\u65F6\u8C03\u7528finally,\u7B49\u5F85Promise.resolve(cb())\u7684\u6267\u884C\u7684\u7ED3\u679C\uFF0C\u5F53cb\u7ED3\u679C\u4E3A\u5931\u8D25\u65F6\uFF0C\u76F4\u63A5\u4EE5\u5931\u8D25\u7684\u7ED3\u679C\u76F4\u63A5\u8D70catch</span>
      <span class="token comment">// \u800C\u53EA\u6709\u5728Promise.resolve\u6210\u529F\u65F6\u5019\uFF0C\u624D\u4F1A\u53BB\u6267\u884C.then(()=&gt;{throw err}),\u629B\u51FAthis\u5B9E\u4F8Breject\u7684err\u4FE1\u606F</span>
      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> err
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * \u5176\u4F59\u91CD\u590D\u4EE3\u7801\u7701\u7565
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mypromise-resolve" tabindex="-1"><a class="header-anchor" href="#mypromise-resolve" aria-hidden="true">#</a> myPromise.resolve</h2><p>Promise.resolve() \u65B9\u6CD5\u4F1A\u521B\u9020\u4E00\u4E2A\u6210\u529F\u7684promsie,\u5C5E\u4E8E\u7C7B\u4E0A\u7684\u65B9\u6CD5\uFF0C\u901A\u8FC7className\u8C03\u7528</p><p>\u6F14\u53D8\u8FC7\u7A0B\uFF1Atest.js</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> Promise <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./myPromise&#39;</span><span class="token punctuation">)</span>
Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 200</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// \u7B49\u4EF7\u4E8E</span>
<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 200</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5B9E\u73B0\uFF1AmyPromise.js</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * \u5176\u4F59\u91CD\u590D\u65E0\u6539\u52A8
   */</span>
  <span class="token keyword">let</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u4E00\u4E2Apromise\u76F4\u63A5resolve \u53E6\u4E00\u4E2Apromise\u65F6,\u4F1A\u7B49\u5F85\u91CC\u9762\u7684promise\u6267\u884C\u5B8C\uFF0C\u8FD4\u56DE\u6210\u529F\u7684\u6267\u884C\u7ED3\u679C</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value
      <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">RESOLVED</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>onfulfilledCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> <span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// reject \u4E00\u4E2Apromise\u65F6\uFF0C\u4E0D\u9700\u8981\u5355\u72EC\u5904\u7406\uFF0C\u5931\u8D25\u5C31\u76F4\u63A5\u8D70\u5931\u8D25\u7684\u903B\u8F91\uFF0C\u4E0D\u7528\u5904\u7406\u5176\u8FD4\u56DE\u503C</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> reason
      <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">REJECTED</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>onrejectedCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token doc-comment comment">/**
   * \u5176\u4F59\u91CD\u590D\u65E0\u6539\u52A8
   */</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mypromise-reject" tabindex="-1"><a class="header-anchor" href="#mypromise-reject" aria-hidden="true">#</a> myPromise.reject</h2><p>Promise.reject() \u65B9\u6CD5\u4F1A\u521B\u9020\u4E00\u4E2A\u5931\u8D25\u7684promsie,\u5C5E\u4E8E\u7C7B\u4E0A\u7684\u65B9\u6CD5\uFF0C\u901A\u8FC7className\u8C03\u7528\u3002</p><p>\u6F14\u53D8\u8FC7\u7A0B\uFF1Atest.js</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> Promise <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./myPromise&#39;</span><span class="token punctuation">)</span>

Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">&#39;errrrrr&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 100 errrrrr</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// \u7B49\u4EF7\u4E8E</span>
<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">&#39;errrrrr&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 100 errrrrr</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5B9E\u73B0\uFF1AmyPromise.js</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Promise</span><span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * \u5176\u4F59\u91CD\u590D\u65E0\u6539\u52A8
   */</span>
  <span class="token keyword">static</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * \u5176\u4F59\u91CD\u590D\u65E0\u6539\u52A8
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mypromise-all" tabindex="-1"><a class="header-anchor" href="#mypromise-all" aria-hidden="true">#</a> myPromise.all</h2><p>Promise.all()\u65B9\u6CD5\u7528\u4E8E\u5C06\u591A\u4E2A Promise \u5B9E\u4F8B\uFF0C\u5305\u88C5\u5E76\u8FD4\u56DE\u4E00\u4E2A\u65B0\u7684 Promise \u5B9E\u4F8Bp</p><p>p\u7684\u72B6\u6001\u7531\u4F20\u9012\u7684\u591A\u4E2A Promise \u51B3\u5B9A\uFF0C\u5206\u6210\u4E24\u79CD\u60C5\u51B5\u3002(\u5B98\u7F51\u662F\u8FD9\u6837\u8BF4\u7684)</p><p>\uFF081\uFF09\u53EA\u6709\u6240\u6709promise\u5B9E\u4F8B\u7684\u72B6\u6001\u90FD\u53D8\u6210fulfilled\uFF0Cp\u7684\u72B6\u6001\u624D\u4F1A\u53D8\u6210fulfilled\uFF0C\u6B64\u65F6\u6570\u7EC4\u4E2Dpromise\u7684\u8FD4\u56DE\u503C\u7EC4\u6210\u4E00\u4E2A\u6570\u7EC4\uFF0C\u4F20\u9012\u7ED9p\u7684\u56DE\u8C03\u51FD\u6570\u3002</p><p>\uFF082\uFF09\u53EA\u8981\u6570\u7EC4\u7684\u4E2Dpromise\u6709\u4E00\u4E2A\u88ABrejected\uFF0Cp\u7684\u72B6\u6001\u5C31\u53D8\u6210rejected\uFF0C\u6B64\u65F6\u7B2C\u4E00\u4E2A\u88ABreject\u7684\u5B9E\u4F8B\u7684\u8FD4\u56DE\u503C\uFF0C\u4F1A\u4F20\u9012\u7ED9p\u7684\u56DE\u8C03\u51FD\u6570\u3002</p><p>test.js</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> Promise <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./myPromise&#39;</span><span class="token punctuation">)</span>
Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span>
  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;\u6210\u529F&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;\u6210\u529F&#39;</span><span class="token punctuation">)</span>    <span class="token comment">// \u60C5\u51B51</span>
      <span class="token comment">// reject(&#39;\u5931\u8D25&#39;)  // \u60C5\u51B52</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// \u60C5\u51B51. [ 1, 2, 3, &#39;\u6210\u529F&#39;, &#39;\u6210\u529F&#39; ]</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// \u60C5\u51B52. \u5931\u8D25</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>myPromise.js</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Promise</span><span class="token punctuation">{</span>
  <span class="token comment">// \u5728\u539F\u6709\u4EE3\u7801\u57FA\u7840\u4E0A\uFF0C\u6DFB\u52A0\u4E00\u4E2A\u9759\u6001\u65B9\u6CD5</span>
  <span class="token keyword">static</span> <span class="token function">all</span><span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
      <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
      <span class="token keyword">let</span> times <span class="token operator">=</span> <span class="token number">0</span>
      <span class="token keyword">const</span> <span class="token function-variable function">processSuccess</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span>val</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        result<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> val
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">++</span>times <span class="token operator">===</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u5E76\u53D1\u3002\u591A\u4E2A\u8BF7\u6C42\u4E00\u8D77\u6267\u884C</span>
        <span class="token keyword">let</span> p <span class="token operator">=</span> promises<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> p<span class="token punctuation">.</span>then <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">// \u5224\u65ADp\u662F\u4E0D\u662Fpromise\u5B9E\u4F8B\uFF0C\u662F\u5219\u7EE7\u7EED\u7B49\u5F85p\u7684\u6267\u884C\u7ED3\u679C\uFF0C\u5904\u7406p\u5BF9\u5E94\u7684\u6210\u529F\u548C\u5931\u8D25</span>
          p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
            <span class="token function">processSuccess</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>data<span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token comment">// \u5982\u679C\u5176\u4E2D\u4E00\u4E2Apromise\u5931\u8D25\u4E86\uFF0C\u76F4\u63A5\u6267\u884C\u5931\u8D25\u56DE\u8C03\uFF0C\u7531\u4E8Ereject\u672C\u8EAB\u5C31\u662F\u51FD\u6570\uFF0C\u6545\u53EF\u7B80\u5199</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>   <span class="token comment">// \u5982\u679C\u4E0D\u662Fpromise\u5B9E\u4F8B\u5C31\u76F4\u63A5\u8C03\u7528\u6210\u529F\uFF0C\u5E76\u5B58\u50A8\u8BE5\u503C</span>
          <span class="token function">processSuccess</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>p<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mypromise-race" tabindex="-1"><a class="header-anchor" href="#mypromise-race" aria-hidden="true">#</a> myPromise.race</h2><p>Promise.race()\u65B9\u6CD5\u540C\u6837\u662F\u5C06\u591A\u4E2A Promise \u5B9E\u4F8B\uFF0C\u5305\u88C5\u5E76\u8FD4\u56DE\u4E00\u4E2A\u65B0\u7684 Promise \u5B9E\u4F8Bp\u3002 \u53EA\u8981\u6709\u4E00\u4E2A\u5B9E\u4F8B\u7387\u5148\u6539\u53D8\u72B6\u6001\uFF0Cp\u7684\u72B6\u6001\u5C31\u8DDF\u7740\u6539\u53D8\u3002\u90A3\u4E2A\u7387\u5148\u6539\u53D8\u7684 Promise \u5B9E\u4F8B\u7684\u8FD4\u56DE\u503C\uFF0C\u5C31\u4F20\u9012\u7ED9p\u7684\u56DE\u8C03\u51FD\u6570\u3002</p><p>(\u7B80\u5355\u7406\u89E3\uFF1Arace \u8D5B\u8DD1\uFF0C\u91C7\u7528\u6700\u5FEB\u7684\u90A3\u4E00\u4E2A\uFF0Crace\u65B9\u6CD5\u5982\u679C\u5176\u4E2D\u4E00\u4E2A\u5B8C\u6210\u4E86\uFF0C\u5176\u4ED6\u65B9\u6CD5\u8FD8\u662F\u4F1A\u6267\u884C\u5B8C\uFF0C\u53EA\u662F\u5E76\u6CA1\u6709\u91C7\u7528\u4ED6\u7684\u7ED3\u679C)</p><p>test.js</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> Promise <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./myPromise&#39;</span><span class="token punctuation">)</span>
Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;\u6210\u529F&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;\u5931\u8D25&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// \u8F93\u51FA\uFF1A\u5931\u8D25\uFF0Cresolve 2s\u6267\u884C\uFF0Creject 1s\u6267\u884C\uFF0Creject\u66F4\u5FEB</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>myPromise.js</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Promise</span><span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token function">race</span><span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
      <span class="token comment">// for\u5FAA\u73AF\u6267\u884C\uFF0C\u53EA\u8981\u6709\u4E00\u4E2A\u72B6\u6001\u53D1\u751F\u6539\u53D8\uFF0C\u5C31\u76F4\u63A5\u5C06\u8BE5\u5B9E\u4F8B\u7684\u8FD4\u56DE\u503C \u8FD4\u56DE</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> p <span class="token operator">=</span> promises<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> p<span class="token punctuation">.</span>then <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>reject<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mypromise\u7EC8\u6781\u7248\u672C" tabindex="-1"><a class="header-anchor" href="#mypromise\u7EC8\u6781\u7248\u672C" aria-hidden="true">#</a> myPromise\u7EC8\u6781\u7248\u672C</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">RESOLVED</span> <span class="token operator">=</span> <span class="token string">&#39;RESOLVED&#39;</span>
<span class="token keyword">const</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">&#39;REJECTED&#39;</span>
<span class="token keyword">const</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">&#39;PENDING&#39;</span>
<span class="token keyword">const</span> <span class="token function-variable function">resolvePromise</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>promise2 <span class="token operator">===</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&#39;\u5FAA\u73AF\u5F15\u7528\u62A5\u9519&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">let</span> called<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> then <span class="token operator">=</span> x<span class="token punctuation">.</span>then
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> then <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">then</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token parameter">y</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span>
          called <span class="token operator">=</span> <span class="token boolean">true</span>
          <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> y<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span>
          called <span class="token operator">=</span> <span class="token boolean">true</span>
          <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span>
      called <span class="token operator">=</span> <span class="token boolean">true</span>
      <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">PENDING</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">undefined</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> <span class="token keyword">undefined</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>onfulfilledCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>onrejectedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">RESOLVED</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>onfulfilledCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> <span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> reason
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">REJECTED</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>onrejectedCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onfulfilled<span class="token punctuation">,</span> onrejected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    onfulfilled <span class="token operator">=</span> <span class="token keyword">typeof</span> onfulfilled <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">?</span> <span class="token function-variable function">onfulfilled</span> <span class="token operator">:</span> <span class="token parameter">v</span> <span class="token operator">=&gt;</span> v<span class="token punctuation">;</span>
    onrejected <span class="token operator">=</span> <span class="token keyword">typeof</span> onrejected <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">?</span> <span class="token function-variable function">onrejected</span> <span class="token operator">:</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> err
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">RESOLVED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onfulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onrejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>
            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>onfulfilledCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
              <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onfulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
              <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>onrejectedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
              <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onrejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>
              <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> promise2
  <span class="token punctuation">}</span>
  <span class="token keyword">catch</span> <span class="token punctuation">(</span>onrejected<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> onrejected<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token function">finally</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> data<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">throw</span> err
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token function">all</span><span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
      <span class="token keyword">let</span> times <span class="token operator">=</span> <span class="token number">0</span>
      <span class="token keyword">const</span> <span class="token function-variable function">processSuccess</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> val
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>times <span class="token operator">===</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> p <span class="token operator">=</span> promises<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> p<span class="token punctuation">.</span>then <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">processSuccess</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> data<span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token function">processSuccess</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> p<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token function">race</span><span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> p <span class="token operator">=</span> promises<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> p<span class="token punctuation">.</span>then <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

Promise<span class="token punctuation">.</span>defer <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function-variable function">deferred</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> dfd <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  dfd<span class="token punctuation">.</span>promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    dfd<span class="token punctuation">.</span>resolve <span class="token operator">=</span> resolve<span class="token punctuation">;</span>
    dfd<span class="token punctuation">.</span>reject <span class="token operator">=</span> reject
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> dfd<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Promise
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,80),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","24.html.vue"]]);export{k as default};
