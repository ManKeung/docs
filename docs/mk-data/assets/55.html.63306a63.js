import{_ as n,o as s,c as a,a as t}from"./app.36dd9d4a.js";const p={},e=t(`<h1 id="javascript\u5947\u6280\u6DEB\u5DE7-debugger\u62E6\u622A" tabindex="-1"><a class="header-anchor" href="#javascript\u5947\u6280\u6DEB\u5DE7-debugger\u62E6\u622A" aria-hidden="true">#</a> JavaScript\u5947\u6280\u6DEB\u5DE7\uFF1Adebugger\u62E6\u622A</h1><p>debugger \u6307\u4EE4\uFF0C\u4E00\u822C\u7528\u4E8E\u8C03\u8BD5\uFF0C\u5728\u5982\u6D4F\u89C8\u5668\u8C03\u8BD5\u6267\u884C\u73AF\u5883\u4E2D\uFF0C\u53EF\u4EE5\u5728 JavaScript \u4EE3\u7801\u4E2D\u4EA7\u751F\u4E2D\u65AD\u3002</p><p>\u5982\u679C\u60F3\u8981\u62E6\u622A debugger\uFF0C\u662F\u4E0D\u5BB9\u6613\u7684\uFF0C\u5E38\u7528\u7684\u51FD\u6570\u66FF\u4EE3\u3001proxy \u65B9\u6CD5\u5747\u5BF9\u5B83\u65E0\u6548\uFF0C\u5982\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>debugger <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> origDebug <span class="token operator">=</span> console<span class="token punctuation">.</span>debugger<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// do something before debugger statement execution</span>
    <span class="token function">origDebug</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>console<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// do something after debugger statement execution</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6216</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>prop <span class="token operator">===</span> <span class="token string">&#39;debugger&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Debugger statement not allowed!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4EE5\u4E0A\u4E24\u65B9\u6CD5\uFF0C\u90FD\u65E0\u6CD5\u5BF9 debugger \u751F\u6548\u3002</p><p>\u800C debugger \u6709\u591A\u79CD\u5199\u6CD5\uFF0C\u5982\uFF1A</p><p>1\u3001debugger; 2\u3001Function(&quot;debugger&quot;).call(); 3\u3001eval(&quot;debugger&quot;); 4\u3001setInterval(function(){debugger;},1000); 5\u3001[].constructor.constructor(&#39;debugger&#39;)();</p><p>\u6700\u539F\u59CB\u7684 debugger\uFF0C\u60F3\u8981\u62E6\u622A\u8FD9\u4E00\u4E2A\u5355\u8BCD\uFF0C\u786E\u5B9E\u662F\u4F3C\u4E4E\u4E0D\u53EF\u884C\uFF0C\u4F46\u5B83\u5728\u73B0\u5B9E\u4E2D\u7684\u4F7F\u7528\u9891\u7387\u662F\u4E0D\u9AD8\u7684\uFF0C\u66F4\u591A\u7684\u662F\u540E\u9762\u51E0\u79CD\u7528\u6CD5\u3002</p><p>\u8FD9\u662F\u56E0\u4E3A\uFF0Cdebugger \u66F4\u591A\u7684\u88AB\u4EBA\u4EEC\u7528\u4E8E\u53CD\u8C03\u8BD5\uFF0C\u6BD4\u5982\u7528 JShaman \u5BF9 JavaScript \u4EE3\u7801\u8FDB\u884C\u6DF7\u6DC6\u52A0\u5BC6\u540E\uFF0C\u5C31\u53EF\u4EE5\u88AB\u52A0\u5165\u591A\u79CD\u4E0D\u540C\u7684 debugger \u6307\u4EE4\u7528\u4E8E\u53CD\u8C03\u8BD5\u3002</p><p>\u800C\u4E0A\u9762\u5C55\u793A\u7684\u540E 4 \u79CD\u7528\u6CD5\uFF0C\u662F\u53EF\u4EE5\u5728\u4EE3\u7801\u4E2D\u8FDB\u884C\u62E6\u622A\u7684\u3002</p><p>Function(&quot;debugger&quot;).call() \u62E6\u622A\u793A\u4F8B\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Function_backup <span class="token operator">=</span> Function<span class="token punctuation">;</span>
<span class="token function-variable function">Function</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span><span class="token string">&#39;debugger&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;\u62E6\u622A\u4E86debugger\uFF0C\u4E2D\u65AD\u4E0D\u4F1A\u53D1\u751F1&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token function">Function_backup</span><span class="token punctuation">(</span><span class="token string">&quot;console.log()&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">Function_backup</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">Function</span><span class="token punctuation">(</span><span class="token string">&quot;debugger&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>eval(&quot;debugger&quot;)</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>eval_backup <span class="token operator">=</span> eval<span class="token punctuation">;</span>
<span class="token function-variable function">eval</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token string">&#39;debugger&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;\u62E6\u622A\u4E86debugger\uFF0C\u4E2D\u65AD\u4E0D\u4F1A\u53D1\u751F0&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">eval_backup</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;debugger&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>setInterval(function(){debugger;},1000)</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> setInterval_backup <span class="token operator">=</span> setInterval
<span class="token function-variable function">setInterval</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;debugger&#39;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;\u62E6\u622A\u4E86debugger\uFF0C\u4E2D\u65AD\u4E0D\u4F1A\u53D1\u751F2&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">setInterval_backup</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">debugger</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>[].constructor.constructor(&#39;debugger&#39;)()</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> constructor_backup <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>constructor<span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>constructor<span class="token punctuation">.</span><span class="token function-variable function">constructor</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token string">&quot;debugger&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;\u62E6\u622A\u4E86debugger\uFF0C\u4E2D\u65AD\u4E0D\u4F1A\u53D1\u751F3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token function">constructor_backup</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>constructor<span class="token punctuation">.</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token string">&#39;debugger&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Anti debugger&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20),o=[e];function c(u,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","55.html.vue"]]);export{r as default};
