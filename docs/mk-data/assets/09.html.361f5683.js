import{_ as n,o as s,c as a,a as t}from"./app.d71537a2.js";const e={},p=t(`<h1 id="\u4EE3\u7801\u4F18\u5316\u6280\u5DE7" tabindex="-1"><a class="header-anchor" href="#\u4EE3\u7801\u4F18\u5316\u6280\u5DE7" aria-hidden="true">#</a> \u4EE3\u7801\u4F18\u5316\u6280\u5DE7</h1><h2 id="\u5E26\u6709\u591A\u4E2A\u6761\u4EF6\u7684-if-\u8BED\u53E5" tabindex="-1"><a class="header-anchor" href="#\u5E26\u6709\u591A\u4E2A\u6761\u4EF6\u7684-if-\u8BED\u53E5" aria-hidden="true">#</a> \u5E26\u6709\u591A\u4E2A\u6761\u4EF6\u7684 if \u8BED\u53E5</h2><p>\u628A\u591A\u4E2A\u503C\u653E\u5728\u4E00\u4E2A\u6570\u7EC4\u4E2D\uFF0C\u7136\u540E\u8C03\u7528\u6570\u7EC4\u7684 includes \u65B9\u6CD5\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>
<span class="token comment">// longhand</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token string">&#39;abc&#39;</span> <span class="token operator">||</span> x <span class="token operator">===</span> <span class="token string">&#39;def&#39;</span> <span class="token operator">||</span> x <span class="token operator">===</span> <span class="token string">&#39;ghi&#39;</span> <span class="token operator">||</span> x <span class="token operator">===</span><span class="token string">&#39;jkl&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//logic</span>
<span class="token punctuation">}</span>

<span class="token comment">// shorthand</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;def&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ghi&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;jkl&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">//logic</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="\u7B80\u5316-if-true-else" tabindex="-1"><a class="header-anchor" href="#\u7B80\u5316-if-true-else" aria-hidden="true">#</a> \u7B80\u5316 if true...else</h1><p>\u5BF9\u4E8E\u4E0D\u5305\u542B\u5927\u903B\u8F91\u7684 if-else \u6761\u4EF6\uFF0C\u53EF\u4EE5\u4F7F\u7528\u4E0B\u9762\u7684\u5FEB\u6377\u5199\u6CD5\u3002\u6211\u4EEC\u53EF\u4EE5\u7B80\u5355\u5730\u4F7F\u7528\u4E09\u5143\u8FD0\u7B97\u7B26\u6765\u5B9E\u73B0\u8FD9\u79CD\u7B80\u5316\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Longhand</span>
<span class="token keyword">let</span> <span class="token literal-property property">test</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    test <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    test <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// Shorthand</span>
<span class="token keyword">let</span> test <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token comment">//\u6216\u8005\u6211\u4EEC\u4E5F\u53EF\u4EE5\u76F4\u63A5\u7528</span>
<span class="token keyword">let</span> test <span class="token operator">=</span> x <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5982\u679C\u6709\u5D4C\u5957\u7684\u6761\u4EF6\uFF0C\u53EF\u4EE5\u8FD9\u4E48\u505A\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>
<span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">,</span>
test2 <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&#39;greater than 100&#39;</span> <span class="token operator">:</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&#39;less 50&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;between 50 and 100&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;greater than 100&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u58F0\u660E\u53D8\u91CF" tabindex="-1"><a class="header-anchor" href="#\u58F0\u660E\u53D8\u91CF" aria-hidden="true">#</a> \u58F0\u660E\u53D8\u91CF</h2><p>\u5F53\u6211\u4EEC\u60F3\u8981\u58F0\u660E\u4E24\u4E2A\u5177\u6709\u76F8\u540C\u7684\u503C\u6216\u76F8\u540C\u7C7B\u578B\u7684\u53D8\u91CF\u65F6\uFF0C\u53EF\u4EE5\u4F7F\u7528\u8FD9\u79CD\u7B80\u5199\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//Longhand</span>
<span class="token keyword">let</span> test1<span class="token punctuation">;</span>
<span class="token keyword">let</span> test2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">//Shorthand</span>
<span class="token keyword">let</span> test1<span class="token punctuation">,</span> test2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="null\u3001undefined-\u548C\u7A7A\u503C\u68C0\u67E5" tabindex="-1"><a class="header-anchor" href="#null\u3001undefined-\u548C\u7A7A\u503C\u68C0\u67E5" aria-hidden="true">#</a> null\u3001undefined \u548C\u7A7A\u503C\u68C0\u67E5</h2><p>\u5F53\u6211\u4EEC\u521B\u5EFA\u4E86\u65B0\u53D8\u91CF\uFF0C\u6709\u65F6\u5019\u60F3\u8981\u68C0\u67E5\u5F15\u7528\u7684\u53D8\u91CF\u662F\u4E0D\u662F\u4E3A\u975E null \u6216 undefined\u3002</p><p>JavaScript \u786E\u5B9E\u6709\u4E00\u4E2A\u5F88\u597D\u7684\u5FEB\u6377\u65B9\u5F0F\u6765\u5B9E\u73B0\u8FD9\u79CD\u68C0\u67E5\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Longhand</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>test1 <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">||</span> test1 <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> test1 <span class="token operator">!==</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> test2 <span class="token operator">=</span> test1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// Shorthand</span>
<span class="token keyword">let</span> test2 <span class="token operator">=</span> test1 <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="null-\u68C0\u67E5\u548C\u9ED8\u8BA4\u8D4B\u503C" tabindex="-1"><a class="header-anchor" href="#null-\u68C0\u67E5\u548C\u9ED8\u8BA4\u8D4B\u503C" aria-hidden="true">#</a> null \u68C0\u67E5\u548C\u9ED8\u8BA4\u8D4B\u503C</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>
<span class="token keyword">let</span> test1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    test2 <span class="token operator">=</span> test1 <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;null check&quot;</span><span class="token punctuation">,</span> test2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u8F93\u51FA &quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="undefined-\u68C0\u67E5\u548C\u9ED8\u8BA4\u8D4B\u503C" tabindex="-1"><a class="header-anchor" href="#undefined-\u68C0\u67E5\u548C\u9ED8\u8BA4\u8D4B\u503C" aria-hidden="true">#</a> undefined \u68C0\u67E5\u548C\u9ED8\u8BA4\u8D4B\u503C</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> test1 <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
    test2 <span class="token operator">=</span> test1 <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;undefined check&quot;</span><span class="token punctuation">,</span> test2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u8F93\u51FA &quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E00\u822C\u503C\u68C0\u67E5</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>
<span class="token keyword">let</span> test1 <span class="token operator">=</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span>
    test2 <span class="token operator">=</span> test1 <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u8F93\u51FA: &#39;test&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u53E6\u5916\uFF0C\u5BF9\u4E8E\u4E0A\u8FF0\u76843\u70B9\uFF0C\u90FD\u53EF\u4EE5\u4F7F\u7528?? \u64CD\u4F5C\u7B26\u3002</p><p>\u5982\u679C\u5DE6\u8FB9\u503C\u4E3A null \u6216 undefined\uFF0C\u5C31\u8FD4\u56DE\u53F3\u8FB9\u7684\u503C\u3002\u9ED8\u8BA4\u60C5\u51B5\u4E0B\uFF0C\u5B83\u5C06\u8FD4\u56DE\u5DE6\u8FB9\u7684\u503C\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> test<span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">??</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// \u8F93\u51FA\u7ED3\u679C: &quot;default&quot;</span>
<span class="token keyword">const</span> test1 <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">??</span> <span class="token number">2</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// \u8F93\u51FA\u7ED3\u679C: 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u7ED9\u591A\u4E2A\u53D8\u91CF\u8D4B\u503C" tabindex="-1"><a class="header-anchor" href="#\u7ED9\u591A\u4E2A\u53D8\u91CF\u8D4B\u503C" aria-hidden="true">#</a> \u7ED9\u591A\u4E2A\u53D8\u91CF\u8D4B\u503C</h2><p>\u5F53\u6211\u4EEC\u60F3\u7ED9\u591A\u4E2A\u4E0D\u540C\u7684\u53D8\u91CF\u8D4B\u503C\u65F6\uFF0C\u8FD9\u79CD\u6280\u5DE7\u975E\u5E38\u6709\u7528\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Longhand</span>
<span class="token keyword">let</span> test1<span class="token punctuation">,</span> test2<span class="token punctuation">,</span> test3<span class="token punctuation">;</span>
test1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
test2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
test3 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token comment">// Shorthand</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>test1<span class="token punctuation">,</span> test2<span class="token punctuation">,</span> test3<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u7B80\u4FBF\u7684\u8D4B\u503C\u64CD\u4F5C\u7B26" tabindex="-1"><a class="header-anchor" href="#\u7B80\u4FBF\u7684\u8D4B\u503C\u64CD\u4F5C\u7B26" aria-hidden="true">#</a> \u7B80\u4FBF\u7684\u8D4B\u503C\u64CD\u4F5C\u7B26</h2><p>\u5728\u7F16\u7A0B\u8FC7\u7A0B\u4E2D\uFF0C\u6211\u4EEC\u8981\u5904\u7406\u5927\u91CF\u7684\u7B97\u672F\u8FD0\u7B97\u7B26\u3002\u8FD9\u662F JavaScript \u53D8\u91CF\u8D4B\u503C\u64CD\u4F5C\u7B26\u7684\u6709\u7528\u6280\u5DE7\u4E4B\u4E00\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Longhand</span>
test1 <span class="token operator">=</span> test1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
test2 <span class="token operator">=</span> test2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
test3 <span class="token operator">=</span> test3 <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token comment">// Shorthand</span>
test1<span class="token operator">++</span><span class="token punctuation">;</span>
test2<span class="token operator">--</span><span class="token punctuation">;</span>
test3 <span class="token operator">*=</span> <span class="token number">20</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="if-\u5224\u65AD\u503C\u662F\u5426\u5B58\u5728" tabindex="-1"><a class="header-anchor" href="#if-\u5224\u65AD\u503C\u662F\u5426\u5B58\u5728" aria-hidden="true">#</a> if \u5224\u65AD\u503C\u662F\u5426\u5B58\u5728</h2><p>\u8FD9\u662F\u6211\u4EEC\u90FD\u5728\u4F7F\u7528\u7684\u4E00\u79CD\u5E38\u7528\u7684\u7B80\u4FBF\u6280\u5DE7\uFF0C\u5728\u8FD9\u91CC\u4ECD\u7136\u503C\u5F97\u518D\u63D0\u4E00\u4E0B\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Longhand</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>test1 <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> or <span class="token keyword">if</span> <span class="token punctuation">(</span>test1 <span class="token operator">!==</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> or <span class="token keyword">if</span> <span class="token punctuation">(</span>test1 <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token comment">// Shorthand //\u68C0\u67E5\u7A7A\u5B57\u7B26\u4E32\u3001null\u6216\u8005undefined</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>test1<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>\u6CE8\u610F\uFF1A\u5982\u679C test1 \u6709\u503C\uFF0C\u5C06\u6267\u884C if \u4E4B\u540E\u7684\u903B\u8F91\uFF0C\u8FD9\u4E2A\u64CD\u4F5C\u7B26\u4E3B\u8981\u7528\u4E8E null \u6216 undefinded \u68C0\u67E5\u3002</p></blockquote><h2 id="\u7528\u4E8E\u591A\u4E2A\u6761\u4EF6\u5224\u65AD\u7684-\u64CD\u4F5C\u7B26" tabindex="-1"><a class="header-anchor" href="#\u7528\u4E8E\u591A\u4E2A\u6761\u4EF6\u5224\u65AD\u7684-\u64CD\u4F5C\u7B26" aria-hidden="true">#</a> \u7528\u4E8E\u591A\u4E2A\u6761\u4EF6\u5224\u65AD\u7684 &amp;&amp; \u64CD\u4F5C\u7B26</h2><p>\u5982\u679C\u53EA\u5728\u53D8\u91CF\u4E3A true \u65F6\u624D\u8C03\u7528\u51FD\u6570\uFF0C\u53EF\u4EE5\u4F7F\u7528 &amp;&amp; \u64CD\u4F5C\u7B26\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Longhand</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>test1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// Shorthand</span>
test1 <span class="token operator">&amp;&amp;</span> <span class="token function">callMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="for-each-\u5FAA\u73AF" tabindex="-1"><a class="header-anchor" href="#for-each-\u5FAA\u73AF" aria-hidden="true">#</a> for each \u5FAA\u73AF</h2><p>\u8FD9\u662F\u4E00\u79CD\u5E38\u89C1\u7684\u5FAA\u73AF\u7B80\u5316\u6280\u5DE7\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Longhand</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> testData<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token comment">// Shorthand</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> testData<span class="token punctuation">)</span> or  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> testData<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u904D\u5386\u6570\u7EC4\u7684\u6BCF\u4E00\u4E2A\u53D8\u91CF\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">testData</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;test[&#39;</span> <span class="token operator">+</span> index <span class="token operator">+</span> <span class="token string">&#39;] = &#39;</span> <span class="token operator">+</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>testData<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// logs: test[0] = 11, test[1] = 24, test[2] = 32</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6BD4\u8F83\u540E\u8FD4\u56DE" tabindex="-1"><a class="header-anchor" href="#\u6BD4\u8F83\u540E\u8FD4\u56DE" aria-hidden="true">#</a> \u6BD4\u8F83\u540E\u8FD4\u56DE</h2><p>\u6211\u4EEC\u4E5F\u53EF\u4EE5\u5728 return \u8BED\u53E5\u4E2D\u4F7F\u7528\u6BD4\u8F83\uFF0C\u5B83\u53EF\u4EE5\u5C06 5 \u884C\u4EE3\u7801\u51CF\u5C11\u5230 1 \u884C\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Longhand</span>
<span class="token keyword">let</span> test<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">checkReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>test <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> test<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">callMe</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token function">checkReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//output test</span>
<span class="token keyword">function</span> <span class="token function">callMe</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// Shorthand</span>
<span class="token keyword">function</span> <span class="token function">checkReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> test <span class="token operator">||</span> <span class="token function">callMe</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u7BAD\u5934\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#\u7BAD\u5934\u51FD\u6570" aria-hidden="true">#</a> \u7BAD\u5934\u51FD\u6570</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Longhand</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// Shorthand</span>
<span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u7B80\u77ED\u7684\u51FD\u6570\u8C03\u7528" tabindex="-1"><a class="header-anchor" href="#\u7B80\u77ED\u7684\u51FD\u6570\u8C03\u7528" aria-hidden="true">#</a> \u7B80\u77ED\u7684\u51FD\u6570\u8C03\u7528</h2><p>\u6211\u4EEC\u53EF\u4EE5\u4F7F\u7528\u4E09\u5143\u64CD\u4F5C\u7B26\u6765\u5B9E\u73B0\u591A\u4E2A\u51FD\u6570\u8C03\u7528\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Longhand</span>
<span class="token keyword">function</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;test1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;test2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> test3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>test3 <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// Shorthand</span>
<span class="token punctuation">(</span>test3 <span class="token operator">===</span> <span class="token number">1</span><span class="token operator">?</span> test1<span class="token operator">:</span>test2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="switch-\u7B80\u5316" tabindex="-1"><a class="header-anchor" href="#switch-\u7B80\u5316" aria-hidden="true">#</a> switch \u7B80\u5316</h2><p>\u6211\u4EEC\u53EF\u4EE5\u5C06\u6761\u4EF6\u4FDD\u5B58\u5728\u952E\u503C\u5BF9\u8C61\u4E2D\uFF0C\u5E76\u6839\u636E\u6761\u4EF6\u6765\u8C03\u7528\u5B83\u4EEC\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Longhand</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
        <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
        <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
        <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
<span class="token comment">// Shorthand</span>
<span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token number">1</span><span class="token operator">:</span> test1<span class="token punctuation">,</span>
    <span class="token number">2</span><span class="token operator">:</span> test2<span class="token punctuation">,</span>
    <span class="token number">3</span><span class="token operator">:</span> test
<span class="token punctuation">}</span><span class="token punctuation">;</span>
data<span class="token punctuation">[</span>something<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">[</span>something<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u9690\u5F0F\u8FD4\u56DE" tabindex="-1"><a class="header-anchor" href="#\u9690\u5F0F\u8FD4\u56DE" aria-hidden="true">#</a> \u9690\u5F0F\u8FD4\u56DE</h2><p>\u901A\u8FC7\u4F7F\u7528\u7BAD\u5934\u51FD\u6570\uFF0C\u6211\u4EEC\u53EF\u4EE5\u76F4\u63A5\u8FD4\u56DE\u503C\uFF0C\u4E0D\u9700\u8981 return \u8BED\u53E5\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// longhand</span>
<span class="token keyword">function</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token parameter">diameter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> diameter
<span class="token punctuation">}</span>
<span class="token comment">// shorthand</span>
<span class="token function-variable function">calculate</span> <span class="token operator">=</span> <span class="token parameter">diameter</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
    Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> diameter<span class="token punctuation">;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6307\u6570\u8868\u793A\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u6307\u6570\u8868\u793A\u6CD5" aria-hidden="true">#</a> \u6307\u6570\u8868\u793A\u6CD5</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Longhand</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token comment">// Shorthand</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1e4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u9ED8\u8BA4\u53C2\u6570\u503C" tabindex="-1"><a class="header-anchor" href="#\u9ED8\u8BA4\u53C2\u6570\u503C" aria-hidden="true">#</a> \u9ED8\u8BA4\u53C2\u6570\u503C</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Longhand</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">test1<span class="token punctuation">,</span> test2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>test1 <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>
        test1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>test2 <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>
        test2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> test1 <span class="token operator">+</span> test2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// shorthand</span>
<span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">test1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> test2 <span class="token operator">=</span> <span class="token number">2</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>test1 <span class="token operator">+</span> test2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//\u8F93\u51FA\u7ED3\u679C: 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5EF6\u5C55\u64CD\u4F5C\u7B26\u7B80\u5316" tabindex="-1"><a class="header-anchor" href="#\u5EF6\u5C55\u64CD\u4F5C\u7B26\u7B80\u5316" aria-hidden="true">#</a> \u5EF6\u5C55\u64CD\u4F5C\u7B26\u7B80\u5316</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// longhand</span>
<span class="token comment">// \u4F7F\u7528concat\u8FDE\u63A5\u6570\u7EC4</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span> <span class="token punctuation">,</span><span class="token number">5</span> <span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// shorthand</span>
<span class="token comment">// \u8FDE\u63A5\u6570\u7EC4</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span> <span class="token punctuation">,</span><span class="token number">5</span> <span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token operator">...</span>data<span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 4, 5, 6, 1, 2, 3]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6211\u4EEC\u4E5F\u53EF\u4EE5\u4F7F\u7528\u5EF6\u5C55\u64CD\u4F5C\u7B26\u8FDB\u884C\u514B\u9686\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// longhand</span>
<span class="token comment">// \u514B\u9686\u6570\u7EC4</span>
<span class="token keyword">const</span> test1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> test2 <span class="token operator">=</span> test1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// shorthand</span>
<span class="token comment">//\u514B\u9686\u6570\u7EC4</span>
<span class="token keyword">const</span> test1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> test2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>test1<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6A21\u677F\u5B57\u9762\u91CF" tabindex="-1"><a class="header-anchor" href="#\u6A21\u677F\u5B57\u9762\u91CF" aria-hidden="true">#</a> \u6A21\u677F\u5B57\u9762\u91CF</h2><p>\u5982\u679C\u4F60\u538C\u5026\u4E86\u4F7F\u7528 + \u5C06\u591A\u4E2A\u53D8\u91CF\u8FDE\u63A5\u6210\u4E00\u4E2A\u5B57\u7B26\u4E32\uFF0C\u90A3\u4E48\u8FD9\u4E2A\u7B80\u5316\u6280\u5DE7\u5C06\u8BA9\u4F60\u4E0D\u518D\u5934\u75DB\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// longhand</span>
<span class="token keyword">const</span> welcome <span class="token operator">=</span> <span class="token string">&#39;Hi &#39;</span> <span class="token operator">+</span> test1 <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> test2 <span class="token operator">+</span> <span class="token string">&#39;.&#39;</span>
<span class="token comment">// shorthand</span>
<span class="token keyword">const</span> welcome <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hi </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>test1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>test2<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u8DE8\u884C\u5B57\u7B26\u4E32" tabindex="-1"><a class="header-anchor" href="#\u8DE8\u884C\u5B57\u7B26\u4E32" aria-hidden="true">#</a> \u8DE8\u884C\u5B57\u7B26\u4E32</h2><p>\u5F53\u6211\u4EEC\u5728\u4EE3\u7801\u4E2D\u5904\u7406\u8DE8\u884C\u5B57\u7B26\u4E32\u65F6\uFF0C\u53EF\u4EE5\u8FD9\u6837\u505A\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>
<span class="token comment">//longhand</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token string">&#39;abc abc abc abc abc abc\\n\\t&#39;</span>
    <span class="token operator">+</span> <span class="token string">&#39;test test,test test test test\\n\\t&#39;</span>
<span class="token comment">//shorthand</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">abc abc abc abc abc abc
        test test,test test test test</span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5BF9\u8C61\u5C5E\u6027\u8D4B\u503C" tabindex="-1"><a class="header-anchor" href="#\u5BF9\u8C61\u5C5E\u6027\u8D4B\u503C" aria-hidden="true">#</a> \u5BF9\u8C61\u5C5E\u6027\u8D4B\u503C</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> test1 <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> test2 <span class="token operator">=</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// Longhand</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">test1</span><span class="token operator">:</span> test1<span class="token punctuation">,</span> <span class="token literal-property property">test2</span><span class="token operator">:</span> test2<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// Shorthand</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>test1<span class="token punctuation">,</span> test2<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5C06\u5B57\u7B26\u4E32\u8F6C\u6210\u6570\u5B57" tabindex="-1"><a class="header-anchor" href="#\u5C06\u5B57\u7B26\u4E32\u8F6C\u6210\u6570\u5B57" aria-hidden="true">#</a> \u5C06\u5B57\u7B26\u4E32\u8F6C\u6210\u6570\u5B57</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Longhand</span>
<span class="token keyword">let</span> test1 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> test2 <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;12.3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Shorthand</span>
<span class="token keyword">let</span> test1 <span class="token operator">=</span> <span class="token operator">+</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> test2 <span class="token operator">=</span> <span class="token operator">+</span><span class="token string">&#39;12.3&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u89E3\u6784\u8D4B\u503C" tabindex="-1"><a class="header-anchor" href="#\u89E3\u6784\u8D4B\u503C" aria-hidden="true">#</a> \u89E3\u6784\u8D4B\u503C</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// longhand</span>
<span class="token keyword">const</span> test1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>test1<span class="token punctuation">;</span>
<span class="token keyword">const</span> test2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>test2<span class="token punctuation">;</span>
<span class="token keyword">const</span> test2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>test3<span class="token punctuation">;</span>
<span class="token comment">// shorthand</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> test1<span class="token punctuation">,</span> test2<span class="token punctuation">,</span> test3 <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6570\u7EC4-find-\u7B80\u5316" tabindex="-1"><a class="header-anchor" href="#\u6570\u7EC4-find-\u7B80\u5316" aria-hidden="true">#</a> \u6570\u7EC4 find \u7B80\u5316</h2><p>\u5F53\u6211\u4EEC\u6709\u4E00\u4E2A\u5BF9\u8C61\u6570\u7EC4\uFF0C\u5E76\u60F3\u6839\u636E\u5BF9\u8C61\u5C5E\u6027\u627E\u5230\u7279\u5B9A\u5BF9\u8C61\uFF0Cfind \u65B9\u6CD5\u4F1A\u975E\u5E38\u6709\u7528\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;test1&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;abc&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;test2&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;cde&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;test1&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;fgh&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
<span class="token keyword">function</span> <span class="token function">findtest1</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;test1&#39;</span> <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">===</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//Shorthand</span>
filteredData <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> data<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;test1&#39;</span> <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;fgh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>filteredData<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { type: &#39;test1&#39;, name: &#39;fgh&#39; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="indexof-\u7684\u6309\u4F4D\u64CD\u4F5C\u7B80\u5316" tabindex="-1"><a class="header-anchor" href="#indexof-\u7684\u6309\u4F4D\u64CD\u4F5C\u7B80\u5316" aria-hidden="true">#</a> indexOf \u7684\u6309\u4F4D\u64CD\u4F5C\u7B80\u5316</h2><p>\u5728\u67E5\u627E\u6570\u7EC4\u7684\u67D0\u4E2A\u503C\u65F6\uFF0C\u6211\u4EEC\u53EF\u4EE5\u4F7F\u7528 indexOf() \u65B9\u6CD5\u3002\u4F46\u6709\u4E00\u79CD\u66F4\u597D\u7684\u65B9\u6CD5\uFF0C\u8BA9\u6211\u4EEC\u6765\u770B\u4E00\u4E0B\u8FD9\u4E2A\u4F8B\u5B50\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// longhand</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// item found</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// item not found</span>
<span class="token punctuation">}</span>
<span class="token comment">// shorthand</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">~</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// item found</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">~</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// item not found</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6309\u4F4D ( ~ ) \u8FD0\u7B97\u7B26\u5C06\u8FD4\u56DE true\uFF08-1 \u9664\u5916\uFF09\uFF0C\u53CD\u5411\u64CD\u4F5C\u53EA\u9700\u8981!~\u3002\u53E6\u5916\uFF0C\u4E5F\u53EF\u4EE5\u4F7F\u7528 include() \u51FD\u6570\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// \u5982\u679C\u627E\u5230\u9879\u76EE\uFF0C\u5219\u4E3Atrue</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="object-entries" tabindex="-1"><a class="header-anchor" href="#object-entries" aria-hidden="true">#</a> Object.entries()</h2><p>\u8FD9\u4E2A\u65B9\u6CD5\u53EF\u4EE5\u5C06\u5BF9\u8C61\u8F6C\u6362\u4E3A\u5BF9\u8C61\u6570\u7EC4\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">test1</span><span class="token operator">:</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">test2</span><span class="token operator">:</span> <span class="token string">&#39;cde&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">test3</span><span class="token operator">:</span> <span class="token string">&#39;efg&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/** Output:
[ [ &#39;test1&#39;, &#39;abc&#39; ],
  [ &#39;test2&#39;, &#39;cde&#39; ],
  [ &#39;test3&#39;, &#39;efg&#39; ]
]
**/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="object-values" tabindex="-1"><a class="header-anchor" href="#object-values" aria-hidden="true">#</a> Object.values()</h2><p>\u8FD9\u4E5F\u662F ES8 \u4E2D\u5F15\u5165\u7684\u4E00\u4E2A\u65B0\u7279\u6027\uFF0C\u5B83\u7684\u529F\u80FD\u7C7B\u4F3C\u4E8E Object.entries()\uFF0C\u53EA\u662F\u6CA1\u6709\u952E\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">test1</span><span class="token operator">:</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">test2</span><span class="token operator">:</span> <span class="token string">&#39;cde&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/** Output:
[ &#39;abc&#39;, &#39;cde&#39;]
**/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u53CC\u91CD\u6309\u4F4D\u64CD\u4F5C" tabindex="-1"><a class="header-anchor" href="#\u53CC\u91CD\u6309\u4F4D\u64CD\u4F5C" aria-hidden="true">#</a> \u53CC\u91CD\u6309\u4F4D\u64CD\u4F5C</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Longhand</span>
Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">1.9</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">1</span> <span class="token comment">// true</span>
<span class="token comment">// Shorthand</span>
<span class="token operator">~</span><span class="token operator">~</span><span class="token number">1.9</span> <span class="token operator">===</span> <span class="token number">1</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u91CD\u590D\u5B57\u7B26\u4E32\u591A\u6B21" tabindex="-1"><a class="header-anchor" href="#\u91CD\u590D\u5B57\u7B26\u4E32\u591A\u6B21" aria-hidden="true">#</a> \u91CD\u590D\u5B57\u7B26\u4E32\u591A\u6B21</h2><p>\u4E3A\u4E86\u91CD\u590D\u64CD\u4F5C\u76F8\u540C\u7684\u5B57\u7B26\uFF0C\u6211\u4EEC\u53EF\u4EE5\u4F7F\u7528 for \u5FAA\u73AF\uFF0C\u4F46\u5176\u5B9E\u8FD8\u6709\u4E00\u79CD\u7B80\u4FBF\u7684\u65B9\u6CD5\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// longhand</span>
<span class="token keyword">let</span> test <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    test <span class="token operator">+=</span> <span class="token string">&#39;test &#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// test test test test test</span>
<span class="token comment">// shorthand</span>
<span class="token string">&#39;test &#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u67E5\u627E\u6570\u7EC4\u7684\u6700\u5927\u503C\u548C\u6700\u5C0F\u503C" tabindex="-1"><a class="header-anchor" href="#\u67E5\u627E\u6570\u7EC4\u7684\u6700\u5927\u503C\u548C\u6700\u5C0F\u503C" aria-hidden="true">#</a> \u67E5\u627E\u6570\u7EC4\u7684\u6700\u5927\u503C\u548C\u6700\u5C0F\u503C</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>\u2026arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>\u2026arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u83B7\u53D6\u5B57\u7B26\u4E32\u7684\u5B57\u7B26" tabindex="-1"><a class="header-anchor" href="#\u83B7\u53D6\u5B57\u7B26\u4E32\u7684\u5B57\u7B26" aria-hidden="true">#</a> \u83B7\u53D6\u5B57\u7B26\u4E32\u7684\u5B57\u7B26</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">;</span>
<span class="token comment">//Longhand</span>
str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// c</span>
<span class="token comment">// Shorthand</span>
str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// c</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6307\u6570\u5E42\u7B80\u5316" tabindex="-1"><a class="header-anchor" href="#\u6307\u6570\u5E42\u7B80\u5316" aria-hidden="true">#</a> \u6307\u6570\u5E42\u7B80\u5316</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// longhand</span>
Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8</span>
<span class="token comment">// shorthand</span>
<span class="token number">2</span><span class="token operator">**</span><span class="token number">3</span> <span class="token comment">// 8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u7528-\u4EE3\u66FF-\u7528\u4E8E\u5224\u65AD\u8FD0\u7B97\u7B26\u5DE6\u4FA7\u7684\u503C\u4E3Anull\u6216undefined\u65F6-\u624D\u8FD4\u56DE\u53F3\u4FA7\u7684\u503C" tabindex="-1"><a class="header-anchor" href="#\u7528-\u4EE3\u66FF-\u7528\u4E8E\u5224\u65AD\u8FD0\u7B97\u7B26\u5DE6\u4FA7\u7684\u503C\u4E3Anull\u6216undefined\u65F6-\u624D\u8FD4\u56DE\u53F3\u4FA7\u7684\u503C" aria-hidden="true">#</a> \u7528??\u4EE3\u66FF||\uFF0C\u7528\u4E8E\u5224\u65AD\u8FD0\u7B97\u7B26\u5DE6\u4FA7\u7684\u503C\u4E3Anull\u6216undefined\u65F6\uFF0C\u624D\u8FD4\u56DE\u53F3\u4FA7\u7684\u503C</h2><p>??\u8FD0\u7B97\u7B26\u662F ES2020 \u5F15\u5165\uFF0C\u4E5F\u88AB\u79F0\u4E3Anull\u5224\u65AD\u8FD0\u7B97\u7B26( Nullish coalescing operator)</p><p>\u5B83\u7684\u884C\u4E3A\u7C7B\u4F3C||\uFF0C\u4F46\u662F\u66F4\u4E25</p><p>||\u8FD0\u7B97\u7B26\u662F\u5DE6\u8FB9\u662F\u7A7A\u5B57\u7B26\u4E32\u6216false\u62160\u7B49falsy\u503C\uFF0C\u90FD\u4F1A\u8FD4\u56DE\u540E\u4FA7\u7684\u503C\u3002\u800C??\u5FC5\u987B\u8FD0\u7B97\u7B26\u5DE6\u4FA7\u7684\u503C\u4E3Anull\u6216undefined\u65F6\uFF0C\u624D\u4F1A\u8FD4\u56DE\u53F3\u4FA7\u7684\u503C\u3002\u56E0\u6B640||1\u7684\u7ED3\u679C\u4E3A1\uFF0C0??1\u7684\u7ED3\u679C\u4E3A0</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">settings</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">nullValue</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span>
        <span class="token literal-property property">animationDuration</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token literal-property property">headerText</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">showSplashScreen</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> undefinedValue <span class="token operator">=</span> response<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>undefinedValue <span class="token operator">??</span> <span class="token string">&#39;some other default&#39;</span><span class="token punctuation">;</span> <span class="token comment">// result: &#39;some other default&#39;</span>
<span class="token keyword">const</span> nullValue <span class="token operator">=</span> response<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>nullValue <span class="token operator">??</span> <span class="token string">&#39;some other default&#39;</span><span class="token punctuation">;</span> <span class="token comment">// result: &#39;some other default&#39;</span>
<span class="token keyword">const</span> headerText <span class="token operator">=</span> response<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>headerText <span class="token operator">??</span> <span class="token string">&#39;Hello, world!&#39;</span><span class="token punctuation">;</span> <span class="token comment">// result: &#39;&#39;</span>
<span class="token keyword">const</span> animationDuration <span class="token operator">=</span> response<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>animationDuration <span class="token operator">??</span> <span class="token number">300</span><span class="token punctuation">;</span> <span class="token comment">// result: 0</span>
<span class="token keyword">const</span> showSplashScreen <span class="token operator">=</span> response<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>showSplashScreen <span class="token operator">??</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// result: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u4F7F\u7528-\u7B80\u5316-\u548C\u4E09\u5143\u8FD0\u7B97\u7B26" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528-\u7B80\u5316-\u548C\u4E09\u5143\u8FD0\u7B97\u7B26" aria-hidden="true">#</a> \u4F7F\u7528?.\u7B80\u5316&amp;&amp;\u548C\u4E09\u5143\u8FD0\u7B97\u7B26</h2><p>?.\u4E5F\u662FES2020 \u5F15\u5165\uFF0C\u6709\u4EBA\u79F0\u4E3A\u94FE\u5224\u65AD\u8FD0\u7B97\u7B26\uFF08optional chaining operator\uFF09</p><p>?.\u76F4\u63A5\u5728\u94FE\u5F0F\u8C03\u7528\u7684\u65F6\u5019\u5224\u65AD\uFF0C\u5224\u65AD\u5DE6\u4FA7\u7684\u5BF9\u8C61\u662F\u5426\u4E3Anull\u6216undefined\uFF0C\u5982\u679C\u662F\u7684\uFF0C\u5C31\u4E0D\u518D\u5F80\u4E0B\u8FD0\u7B97\uFF0C\u8FD4\u56DEundefined\uFF0C\u5982\u679C\u4E0D\u662F\uFF0C\u5219\u8FD4\u56DE\u53F3\u4FA7\u7684\u503C</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> street <span class="token operator">=</span> user<span class="token punctuation">.</span>address <span class="token operator">&amp;&amp;</span> user<span class="token punctuation">.</span>address<span class="token punctuation">.</span>street<span class="token punctuation">;</span>

<span class="token keyword">var</span> fooInput <span class="token operator">=</span> myForm<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;input[name=foo]&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> fooValue <span class="token operator">=</span> fooInput <span class="token operator">?</span> fooInput<span class="token punctuation">.</span>value <span class="token operator">:</span> <span class="token keyword">undefined</span>

<span class="token comment">// \u7B80\u5316</span>
<span class="token keyword">var</span> street <span class="token operator">=</span> user<span class="token punctuation">.</span>address<span class="token operator">?.</span>street
<span class="token keyword">var</span> fooValue <span class="token operator">=</span> myForm<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;input[name=foo]&#39;</span><span class="token punctuation">)</span><span class="token operator">?.</span>value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>\u6CE8\uFF1A\u5E38\u89C1\u5199\u6CD5 <ul><li>obj?.prop \u5BF9\u8C61\u5C5E\u6027</li><li>obj?.[expr] \u5BF9\u8C61\u5C5E\u6027</li><li>func?.(...args) \u51FD\u6570\u6216\u5BF9\u8C61\u65B9\u6CD5\u7684\u8C03\u7528</li></ul></li></ul><h2 id="\u4F7F\u7528\u52A8\u6001\u5BFC\u5165import-\u5B9E\u73B0\u6309\u9700\u52A0\u8F7D-\u4F18\u5316\u9759\u6001import" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528\u52A8\u6001\u5BFC\u5165import-\u5B9E\u73B0\u6309\u9700\u52A0\u8F7D-\u4F18\u5316\u9759\u6001import" aria-hidden="true">#</a> \u4F7F\u7528\u52A8\u6001\u5BFC\u5165import()\u5B9E\u73B0\u6309\u9700\u52A0\u8F7D\uFF08\u4F18\u5316\u9759\u6001import\uFF09</h2><p>\u6211\u4EEC\u53EF\u4EE5\u4F7F\u7528 import \u8BED\u53E5\u521D\u59CB\u5316\u7684\u52A0\u8F7D\u4F9D\u8D56\u9879</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> defaultExport <span class="token keyword">from</span> <span class="token string">&quot;module-name&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> name <span class="token keyword">from</span> <span class="token string">&quot;module-name&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4F46\u662F\u9759\u6001\u5F15\u5165\u7684import \u8BED\u53E5\u9700\u8981\u4F9D\u8D56\u4E8E type=&quot;module&quot; \u7684script\u6807\u7B7E\uFF0C\u800C\u4E14\u6709\u7684\u65F6\u5019\u6211\u4EEC\u5E0C\u671B\u53EF\u4EE5\u6839\u636E\u6761\u4EF6\u6765\u6309\u9700\u52A0\u8F7D\u6A21\u5757\uFF0C\u6BD4\u5982\u4EE5\u4E0B\u573A\u666F\uFF1A</p><ul><li>\u5F53\u9759\u6001\u5BFC\u5165\u7684\u6A21\u5757\u5F88\u660E\u663E\u7684\u964D\u4F4E\u4E86\u4EE3\u7801\u7684\u52A0\u8F7D\u901F\u5EA6\u4E14\u88AB\u4F7F\u7528\u7684\u53EF\u80FD\u6027\u5F88\u4F4E\uFF0C\u6216\u8005\u5E76\u4E0D\u9700\u8981\u9A6C\u4E0A\u4F7F\u7528\u5B83</li><li>\u5F53\u9759\u6001\u5BFC\u5165\u7684\u6A21\u5757\u5F88\u660E\u663E\u7684\u5360\u7528\u4E86\u5927\u91CF\u7CFB\u7EDF\u5185\u5B58\u4E14\u88AB\u4F7F\u7528\u7684\u53EF\u80FD\u6027\u5F88\u4F4E</li><li>\u5F53\u88AB\u5BFC\u5165\u7684\u6A21\u5757\uFF0C\u5728\u52A0\u8F7D\u65F6\u5E76\u4E0D\u5B58\u5728\uFF0C\u9700\u8981\u5F02\u6B65\u83B7\u53D6</li><li>\u5F53\u88AB\u5BFC\u5165\u7684\u6A21\u5757\u6709\u526F\u4F5C\u7528\uFF0C\u8FD9\u4E9B\u526F\u4F5C\u7528\u53EA\u6709\u5728\u89E6\u53D1\u4E86\u67D0\u4E9B\u6761\u4EF6\u624D\u88AB\u9700\u8981\u65F6</li></ul><p>\u8FD9\u4E2A\u65F6\u5019\u6211\u4EEC\u5C31\u53EF\u4EE5\u4F7F\u7528\u52A8\u6001\u5F15\u5165import()\uFF0C\u5B83\u8DDF\u51FD\u6570\u4E00\u6837\u53EF\u4EE5\u7528\u4E8E\u5404\u79CD\u5730\u65B9\uFF0C\u8FD4\u56DE\u7684\u662F\u4E00\u4E2A promise</p><p>\u57FA\u672C\u4F7F\u7528\u5982\u4E0B\u4E24\u79CD\u5F62\u5F0F</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//\u5F62\u5F0F 1</span>
<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;/modules/my-module.js&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// Do something with the module.</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//\u5F62\u5F0F2</span>
<span class="token keyword">let</span> module <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;/modules/my-module.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u4F7F\u7528\u9876\u5C42-await-top-level-await-\u7B80\u5316-async-\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528\u9876\u5C42-await-top-level-await-\u7B80\u5316-async-\u51FD\u6570" aria-hidden="true">#</a> \u4F7F\u7528\u9876\u5C42 await\uFF08top-level await\uFF09\u7B80\u5316 async \u51FD\u6570</h2><p>\u5176\u5B9E\u4E0A\u9762\u7684\u4EE3\u7801\u5C31\u6709\u7528\u5230</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> module <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;/modules/my-module.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u9876\u5C42 await \u5141\u8BB8\u5F00\u53D1\u8005\u5728 async \u51FD\u6570\u5916\u90E8\u4F7F\u7528 await \u5B57\u6BB5</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//\u4EE5\u524D</span>
<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\u{1F389}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u2192 \u{1F389}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//\u7B80\u5316\u540E</span>
<span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\u{1F389}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u4F7F\u7528string-prototype-replaceall-\u7B80\u5316replace\u4E00\u6B21\u6027\u66FF\u6362\u6240\u6709\u5B50\u5B57\u7B26\u4E32" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528string-prototype-replaceall-\u7B80\u5316replace\u4E00\u6B21\u6027\u66FF\u6362\u6240\u6709\u5B50\u5B57\u7B26\u4E32" aria-hidden="true">#</a> \u4F7F\u7528String.prototype.replaceAll()\u7B80\u5316replace\u4E00\u6B21\u6027\u66FF\u6362\u6240\u6709\u5B50\u5B57\u7B26\u4E32</h2><p>String.prototype.replaceAll()\u7528\u6CD5\u4E0EString.prototype.replace()\u7C7B\u4F3C</p><p>\u4F46\u662Freplace\u4EC5\u66FF\u6362\u7B2C\u4E00\u6B21\u51FA\u73B0\u7684\u5B50\u5B57\u7B26\u4E32\uFF0C\u800CreplaceAll\u4F1A\u66FF\u6362\u6240\u6709</p><p>\u4F8B\u5982\u9700\u8981\u66FF\u6362\u6240\u6709a\u4E3AA\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \u4EE5\u524D</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//AAA</span>

<span class="token comment">// \u7B80\u5316\u540E</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//AAA</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u4F7F\u7528proxy\u66FF\u4EE3object-defineproperty" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528proxy\u66FF\u4EE3object-defineproperty" aria-hidden="true">#</a> \u4F7F\u7528Proxy\u66FF\u4EE3Object.defineProperty</h2><p>\u4E3A\u4EC0\u4E48\u4F7F\u7528 Proxy \u66FF\u4EE3 Object.defineProperty\uFF0C\u7B80\u5355\u603B\u7ED3Proxy\u7684\u51E0\u70B9\u4F18\u52BF</p><ul><li>Proxy \u662F\u5BF9\u6574\u4E2A\u5BF9\u8C61\u7684\u4EE3\u7406\uFF0C\u800C Object.defineProperty \u53EA\u80FD\u4EE3\u7406\u67D0\u4E2A\u5C5E\u6027</li><li>\u5BF9\u8C61\u4E0A\u65B0\u589E\u5C5E\u6027\uFF0CProxy \u53EF\u4EE5\u76D1\u542C\u5230\uFF0CObject.defineProperty \u4E0D\u80FD</li><li>\u6570\u7EC4\u65B0\u589E\u4FEE\u6539\uFF0CProxy \u53EF\u4EE5\u76D1\u542C\u5230\uFF0CObject.defineProperty \u4E0D\u80FD</li><li>\u82E5\u5BF9\u8C61\u5185\u90E8\u5C5E\u6027\u8981\u5168\u90E8\u9012\u5F52\u4EE3\u7406\uFF0CProxy \u53EF\u4EE5\u53EA\u5728\u8C03\u7528\u7684\u65F6\u5019\u9012\u5F52\uFF0C\u800C Object.definePropery \u9700\u8981\u4E00\u6B21\u5B8C\u6210\u6240\u6709\u9012\u5F52\uFF0C\u6027\u80FD\u6BD4 Proxy \u5DEE</li></ul><p>\u4F7F\u7528\u4E5F\u5F88\u7B80\u5355\uFF0CProxy\u672C\u8D28\u662F\u6784\u9020\u51FD\u6570\uFF0C\u901A\u8FC7new\u5373\u53EF\u4EA7\u751F\u5BF9\u8C61\uFF0C\u5B83\u63A5\u6536\u4E24\u4E2A\u53C2\u6570\uFF1A</p><ul><li>target\u8868\u793A\u7684\u5C31\u662F\u8981\u62E6\u622A\uFF08\u4EE3\u7406\uFF09\u7684\u76EE\u6807\u5BF9\u8C61</li><li>handler\u662F\u7528\u6765\u5B9A\u5236\u62E6\u622A\u884C\u4E3A\uFF0813\u79CD\uFF09</li></ul><p>\u4F8B\u5982\u54CD\u5E94\u5F0Freactive\u7684\u57FA\u672C\u5B9E\u73B0\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u53EF\u4EE5\u505A\u4F9D\u8D56\u6536\u96C6</span>
            <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
            <span class="token keyword">return</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val
            <span class="token comment">// \u89E6\u53D1\u4F9D\u8D56</span>
            <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="promise-any\u5FEB\u901F\u83B7\u53D6\u4E00\u7EC4promise\u5B9E\u4F8B\u4E2D\u7B2C\u4E00\u4E2Afulfilled\u7684promise" tabindex="-1"><a class="header-anchor" href="#promise-any\u5FEB\u901F\u83B7\u53D6\u4E00\u7EC4promise\u5B9E\u4F8B\u4E2D\u7B2C\u4E00\u4E2Afulfilled\u7684promise" aria-hidden="true">#</a> Promise.any\u5FEB\u901F\u83B7\u53D6\u4E00\u7EC4Promise\u5B9E\u4F8B\u4E2D\u7B2C\u4E00\u4E2Afulfilled\u7684promise</h2><p>Promise.any \u63A5\u6536\u4E00\u7EC4Promise\u5B9E\u4F8B\u4F5C\u4E3A\u53C2\u6570</p><ul><li>\u53EA\u8981\u5176\u4E2D\u7684\u4E00\u4E2A promise \u6210\u529F\uFF0C\u5C31\u8FD4\u56DE\u90A3\u4E2A\u5DF2\u7ECF\u6210\u529F\u7684 promise</li><li>\u5982\u679C\u8FD9\u7EC4\u53EF\u8FED\u4EE3\u5BF9\u8C61\u4E2D\uFF0C\u6CA1\u6709\u4E00\u4E2A promise \u6210\u529F\uFF0C\u5C31\u8FD4\u56DE\u4E00\u4E2A\u5931\u8D25\u7684 promise \u548C AggregateError \u7C7B\u578B\u7684\u5B9E\u4F8B</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    nst first <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Any of the promises was fulfilled.</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// All of the promises were rejected.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Promise<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token parameter">first</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// Any of the promises was fulfilled.</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// All of the promises were rejected.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u4F7F\u7528bigint\u652F\u6301\u5927\u6574\u6570\u8BA1\u7B97\u95EE\u9898" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528bigint\u652F\u6301\u5927\u6574\u6570\u8BA1\u7B97\u95EE\u9898" aria-hidden="true">#</a> \u4F7F\u7528BigInt\u652F\u6301\u5927\u6574\u6570\u8BA1\u7B97\u95EE\u9898</h2><p>ES2020\u5F15\u5165\u4E86\u4E00\u79CD\u65B0\u7684\u6570\u636E\u7C7B\u578B BigInt\uFF0C\u7528\u6765\u8868\u793A\u4EFB\u610F\u4F4D\u6570\u7684\u6574\u6570</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \u8D85\u8FC7 53 \u4E2A\u4E8C\u8FDB\u5236\u4F4D\u7684\u6570\u503C\uFF08\u76F8\u5F53\u4E8E 16 \u4E2A\u5341\u8FDB\u5236\u4F4D\uFF09\uFF0C\u65E0\u6CD5\u4FDD\u6301\u7CBE\u5EA6</span>
Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">)</span> <span class="token operator">===</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// true</span>

<span class="token comment">// BigInt</span>
<span class="token function">BigInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">BigInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u9664\u4E86\u4F7F\u7528BigInt\u6765\u58F0\u660E\u4E00\u4E2A\u5927\u6574\u6570\uFF0C\u8FD8\u53EF\u4EE5\u4F7F\u7528\u6570\u5B57\u540E\u9762\u52A0n\u7684\u5F62\u5F0F\uFF0C\u5982</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token number">1234</span> <span class="token comment">// \u666E\u901A\u6574\u6570</span>
<span class="token number">1234n</span> <span class="token comment">// BigInt</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>\u9700\u8981\u4E86\u89E3BigInt\u6570\u5B57\u64CD\u4F5C\u65F6\u7684\u652F\u6301\u60C5\u51B5\uFF0C\u4EE5\u514D\u8E29\u5751</p><table><thead><tr><th>\u64CD\u4F5C</th><th>\u662F\u5426\u652F\u6301</th></tr></thead><tbody><tr><td>\u5355\u76EE (+) \u8FD0\u7B97\u7B26</td><td>N</td></tr><tr><td>+\u3001*\u3001-\u3001**\u3001% \u8FD0\u7B97\u7B26</td><td>Y</td></tr><tr><td>\\ \u9664\u6CD5\u8FD0\u7B97\u7B26</td><td>\u5E26\u5C0F\u6570\u7684\u8FD0\u7B97\u4F1A\u88AB\u53D6\u6574</td></tr><tr><td><code>&gt;&gt;&gt;</code> \u65E0\u7B26\u53F7\u53F3\u79FB\u4F4D\u64CD\u4F5C\u7B26</td><td>N</td></tr><tr><td>\u5176\u4ED6\u4F4D\u79FB\u64CD\u4F5C\u7B26</td><td>Y</td></tr><tr><td>\u4E0E Number \u6DF7\u5408\u8FD0\u7B97</td><td>N\uFF08\u5FC5\u987B\u8F6C\u6362\u4E3A\u540C\u7C7B\u578B\uFF09</td></tr><tr><td>Math \u5BF9\u8C61\u65B9\u6CD5</td><td>N</td></tr><tr><td>Number \u4E0E BigInt \u6BD4\u8F83\uFF08\u6392\u5E8F\uFF09</td><td>Y\uFF08\u5BBD\u677E\u76F8\u7B49 ==\uFF09</td></tr><tr><td>Boolean \u8868\u73B0</td><td>\u7C7B\u578B Number \u5BF9\u8C61</td></tr><tr><td>JSON \u4E2D\u4F7F\u7528</td><td>N</td></tr></tbody></table><h2 id="\u4F7F\u7528array-prototype-at-\u7B80\u5316arr-length" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528array-prototype-at-\u7B80\u5316arr-length" aria-hidden="true">#</a> \u4F7F\u7528Array.prototype.at()\u7B80\u5316arr.length</h2><p>Array.prototype.at()\u63A5\u6536\u4E00\u4E2A\u6B63\u6574\u6570\u6216\u8005\u8D1F\u6574\u6570\u4F5C\u4E3A\u53C2\u6570\uFF0C\u8868\u793A\u83B7\u53D6\u6307\u5B9A\u4F4D\u7F6E\u7684\u6210\u5458</p><p>\u53C2\u6570\u6B63\u6570\u5C31\u8868\u793A\u987A\u6570\u7B2C\u51E0\u4E2A\uFF0C\u8D1F\u6570\u8868\u793A\u5012\u6570\u7B2C\u51E0\u4E2A\uFF0C\u8FD9\u53EF\u4EE5\u5F88\u65B9\u4FBF\u7684\u67D0\u4E2A\u6570\u7EC4\u672B\u5C3E\u7684\u5143\u7D20</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token comment">// \u4EE5\u524D\u83B7\u53D6\u6700\u540E\u4E00\u4F4D</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//5</span>
<span class="token comment">// \u7B80\u5316\u540E</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u4F7F\u7528\u54C8\u5E0C\u524D\u7F00-\u5C06\u7C7B\u5B57\u6BB5\u8BBE\u4E3A\u79C1\u6709" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528\u54C8\u5E0C\u524D\u7F00-\u5C06\u7C7B\u5B57\u6BB5\u8BBE\u4E3A\u79C1\u6709" aria-hidden="true">#</a> \u4F7F\u7528\u54C8\u5E0C\u524D\u7F00#\u5C06\u7C7B\u5B57\u6BB5\u8BBE\u4E3A\u79C1\u6709</h2><p>\u5728\u7C7B\u4E2D\u901A\u8FC7\u54C8\u5E0C\u524D\u7F00#\u6807\u8BB0\u7684\u5B57\u6BB5\u90FD\u5C06\u88AB\u79C1\u6709\uFF0C\u5B50\u7C7B\u5B9E\u4F8B\u5C06\u65E0\u6CD5\u7EE7\u627F</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">ClassWithPrivateField</span> <span class="token punctuation">{</span>
    #privateField<span class="token punctuation">;</span>
    <span class="token function">#privateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>#privateField <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassWithPrivateField</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>privateField<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>privateMethod<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,156),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","09.html.vue"]]);export{r as default};
