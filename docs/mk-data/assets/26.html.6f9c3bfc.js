import{_ as s,o as n,c as a,a as p}from"./app.cf2d5c41.js";const e={},t=p(`<h1 id="ts\u8FDB\u9636\u7528\u6CD5infer" tabindex="-1"><a class="header-anchor" href="#ts\u8FDB\u9636\u7528\u6CD5infer" aria-hidden="true">#</a> TS\u8FDB\u9636\u7528\u6CD5infer</h1><p>infer \u662FTypeScript \u65B0\u589E\u5230\u7684\u5173\u952E\u5B57 \u5145\u5F53\u5360\u4F4D\u7B26</p><p>\u6211\u4EEC\u6765\u5B9E\u73B0\u4E00\u4E2A\u6761\u4EF6\u7C7B\u578B\u63A8\u65AD\u7684\u4F8B\u5B50</p><p>\u5B9A\u4E49\u4E00\u4E2A\u7C7B\u578B \u5982\u679C\u662F\u6570\u7EC4\u7C7B\u578B \u5C31\u8FD4\u56DE \u6570\u7EC4\u5143\u7D20\u7684\u7C7B\u578B \u5426\u5219 \u5C31\u4F20\u5165\u4EC0\u4E48\u7C7B\u578B \u5C31\u8FD4\u56DE\u4EC0\u4E48\u7C7B\u578B</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Infer<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token constant">T</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> Infer<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> Infer<span class="token operator">&lt;</span><span class="token keyword">null</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4F7F\u7528inter \u4FEE\u6539</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Infer<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token operator">:</span> <span class="token constant">T</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> Infer<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token operator">|</span> Symbol<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4F8B\u5B502\u914D\u5408tuple \u8F6C\u6362 union \u8054\u5408\u7C7B\u578B</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">TupleToUni<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">E</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token constant">E</span> <span class="token operator">:</span> <span class="token builtin">never</span>

<span class="token keyword">type</span> <span class="token class-name">TTuple</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">ToUnion</span> <span class="token operator">=</span> TupleToUni<span class="token operator">&lt;</span>TTuple<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// string | number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),o=[t];function l(c,r){return n(),a("div",null,o)}const k=s(e,[["render",l],["__file","26.html.vue"]]);export{k as default};
