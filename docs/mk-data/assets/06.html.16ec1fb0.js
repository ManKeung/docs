import{_ as s,o as a,c as n,a as e}from"./app.26f3bee3.js";const p={},t=e(`<h1 id="\u6709\u7528\u7684\u6B63\u5219" tabindex="-1"><a class="header-anchor" href="#\u6709\u7528\u7684\u6B63\u5219" aria-hidden="true">#</a> \u6709\u7528\u7684\u6B63\u5219</h1><h2 id="\u5343\u4F4D\u683C\u5F0F" tabindex="-1"><a class="header-anchor" href="#\u5343\u4F4D\u683C\u5F0F" aria-hidden="true">#</a> \u5343\u4F4D\u683C\u5F0F</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">formatMoney</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">money</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> money<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">(?!^)(?=(\\\\d{3})+</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>money<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&#39;\\\\.&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;$&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token string">&#39;g&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u9A7C\u5CF0\u5F0F\u5B57\u7B26\u4E32" tabindex="-1"><a class="header-anchor" href="#\u9A7C\u5CF0\u5F0F\u5B57\u7B26\u4E32" aria-hidden="true">#</a> \u9A7C\u5CF0\u5F0F\u5B57\u7B26\u4E32</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 1. foo Bar =&gt; fooBar</span>
<span class="token comment">// 2. foo-bar---- =&gt; fooBar</span>
<span class="token comment">// 3. foo_bar__ =&gt; fooBar</span>

<span class="token keyword">const</span> <span class="token function-variable function">camelCase</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> camelCaseRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[-_\\s]+(.)?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
    <span class="token keyword">return</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>camelCaseRegex<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> char</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> char <span class="token operator">?</span> char<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5C0F\u5199\u8F6C\u5927\u5199" tabindex="-1"><a class="header-anchor" href="#\u5C0F\u5199\u8F6C\u5927\u5199" aria-hidden="true">#</a> \u5C0F\u5199\u8F6C\u5927\u5199</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">capitalize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> capitalizeRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:^|\\s+)\\w</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
    <span class="token keyword">return</span> string<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>capitalizeRegex<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">match</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> match<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Hello World</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token string">&#39;hello WORLD&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Hello World</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="html\u8F6C\u4E49" tabindex="-1"><a class="header-anchor" href="#html\u8F6C\u4E49" aria-hidden="true">#</a> HTML\u8F6C\u4E49</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">escape</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> escapeMaps <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&#39;&amp;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;amp&#39;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&#39;&lt;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;lt&#39;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&#39;&gt;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;gt&#39;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&#39;&quot;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;quot&#39;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;&#39;&quot;</span><span class="token operator">:</span> <span class="token string">&#39;#39&#39;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// The effect here is the same as that of /[&amp;amp;&lt;&gt; &quot;&#39;]/g</span>
    <span class="token keyword">const</span> escapeRegexp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>escapeMaps<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token string">&#39;g&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>escapeRegexp<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">match</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&amp;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>escapeMaps<span class="token punctuation">[</span>match<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">unescape</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> unescapeMaps <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&#39;amp&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&amp;&#39;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&#39;lt&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&lt;&#39;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&#39;gt&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&gt;&#39;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&#39;quot&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&quot;&#39;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&#39;#39&#39;</span><span class="token operator">:</span> <span class="token string">&quot;&#39;&quot;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> unescapeRegexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&amp;([^;]+);</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
    <span class="token keyword">return</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>unescapeRegexp<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> unescapeKey</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> unescapeMaps<span class="token punctuation">[</span> unescapeKey <span class="token punctuation">]</span> <span class="token operator">||</span> match
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u68C0\u67E524\u5C0F\u65F6\u5236" tabindex="-1"><a class="header-anchor" href="#\u68C0\u67E524\u5C0F\u65F6\u5236" aria-hidden="true">#</a> \u68C0\u67E524\u5C0F\u65F6\u5236</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>
<span class="token keyword">const</span> check24TimeRegexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(?:(?:0?|1)\\d|2[0-3]):(?:0?|[1-5])\\d$</span><span class="token regex-delimiter">/</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u68C0\u67E5\u65E5\u671F\u683C\u5F0F" tabindex="-1"><a class="header-anchor" href="#\u68C0\u67E5\u65E5\u671F\u683C\u5F0F" aria-hidden="true">#</a> \u68C0\u67E5\u65E5\u671F\u683C\u5F0F</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> checkDateRegexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d{4}([-\\.\\/])(?:0[1-9]|1[0-2])\\1(?:0[1-9]|[12]\\d|3[01])$</span><span class="token regex-delimiter">/</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> reg1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d{4}(\\-|\\/|\\.)\\d{1,2}\\1\\d{1,2}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> reg2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(^(\\d{4}|\\d{2})(\\-|\\/|\\.)\\d{1,2}\\3\\d{1,2}$)|(^\\d{4}\u5E74\\d{1,2}\u6708\\d{1,2}\u65E5$)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5339\u914D\u989C\u8272" tabindex="-1"><a class="header-anchor" href="#\u5339\u914D\u989C\u8272" aria-hidden="true">#</a> \u5339\u914D\u989C\u8272</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> matchColorRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">#(?:[\\da-fA-F]{6}|[\\da-fA-F]{3})</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="\u68C0\u67E5\u7248\u672C\u53F7" tabindex="-1"><a class="header-anchor" href="#\u68C0\u67E5\u7248\u672C\u53F7" aria-hidden="true">#</a> \u68C0\u67E5\u7248\u672C\u53F7</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> versionRegexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(?:\\d+\\.){2}\\d+$</span><span class="token regex-delimiter">/</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="\u83B7\u53D6\u7F51\u9875\u56FE\u7247\u5730\u5740" tabindex="-1"><a class="header-anchor" href="#\u83B7\u53D6\u7F51\u9875\u56FE\u7247\u5730\u5740" aria-hidden="true">#</a> \u83B7\u53D6\u7F51\u9875\u56FE\u7247\u5730\u5740</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">matchImgs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">sHtml</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> imgUrlRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;img[^&gt;]+src=&quot;((?:https?:)?\\/\\/[^&quot;]+)&quot;[^&gt;]*?&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span>
    <span class="token keyword">let</span> matchImgUrls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    sHtml<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>imgUrlRegex<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> $1</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        $1 <span class="token operator">&amp;&amp;</span> matchImgUrls<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>$1<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> matchImgUrls
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u683C\u5F0F\u5316\u7535\u8BDD\u53F7\u7801" tabindex="-1"><a class="header-anchor" href="#\u683C\u5F0F\u5316\u7535\u8BDD\u53F7\u7801" aria-hidden="true">#</a> \u683C\u5F0F\u5316\u7535\u8BDD\u53F7\u7801</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> mobile <span class="token operator">=</span> <span class="token string">&#39;18379836654&#39;</span>
<span class="token keyword">let</span> mobileReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=(\\d{4})+$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mobile<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>mobileReg<span class="token punctuation">,</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 183-7983-6654</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u9A8C\u8BC1\u90AE\u7BB1\u7684\u6B63\u5219\u8868\u8FBE\u5F0F" tabindex="-1"><a class="header-anchor" href="#\u9A8C\u8BC1\u90AE\u7BB1\u7684\u6B63\u5219\u8868\u8FBE\u5F0F" aria-hidden="true">#</a> \u9A8C\u8BC1\u90AE\u7BB1\u7684\u6B63\u5219\u8868\u8FBE\u5F0F</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isAvailableEmail</span><span class="token punctuation">(</span><span class="token parameter">sEmail</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^([\\w+\\.])+@\\w+([.]\\w+)+$</span><span class="token regex-delimiter">/</span></span>
    <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>sEmail<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6821\u9A8C\u5BC6\u7801\u5F3A\u5EA6" tabindex="-1"><a class="header-anchor" href="#\u6821\u9A8C\u5BC6\u7801\u5F3A\u5EA6" aria-hidden="true">#</a> \u6821\u9A8C\u5BC6\u7801\u5F3A\u5EA6</h2><p>\u5BC6\u7801\u7684\u5F3A\u5EA6\u5FC5\u987B\u662F\u5305\u542B\u5927\u5C0F\u5199\u5B57\u6BCD\u548C\u6570\u5B57\u7684\u7EC4\u5408\uFF0C\u4E0D\u80FD\u4F7F\u7528\u7279\u6B8A\u5B57\u7B26\uFF0C\u957F\u5EA6\u57288-10\u4E4B\u95F4\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="\u6821\u9A8C\u4E2D\u6587" tabindex="-1"><a class="header-anchor" href="#\u6821\u9A8C\u4E2D\u6587" aria-hidden="true">#</a> \u6821\u9A8C\u4E2D\u6587</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> reg <span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[\\\\u4e00-\\\\u9fa5]{0,}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="\u7531\u6570\u5B57\u300126\u4E2A\u82F1\u6587\u5B57\u6BCD\u6216\u4E0B\u5212\u7EBF\u7EC4\u6210\u7684\u5B57\u7B26\u4E32" tabindex="-1"><a class="header-anchor" href="#\u7531\u6570\u5B57\u300126\u4E2A\u82F1\u6587\u5B57\u6BCD\u6216\u4E0B\u5212\u7EBF\u7EC4\u6210\u7684\u5B57\u7B26\u4E32" aria-hidden="true">#</a> \u7531\u6570\u5B57\u300126\u4E2A\u82F1\u6587\u5B57\u6BCD\u6216\u4E0B\u5212\u7EBF\u7EC4\u6210\u7684\u5B57\u7B26\u4E32</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\\\w+$</span><span class="token regex-delimiter">/</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="\u6821\u9A8C\u8EAB\u4EFD\u8BC1\u53F7\u7801" tabindex="-1"><a class="header-anchor" href="#\u6821\u9A8C\u8EAB\u4EFD\u8BC1\u53F7\u7801" aria-hidden="true">#</a> \u6821\u9A8C\u8EAB\u4EFD\u8BC1\u53F7\u7801</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 15</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[1-9]\\\\d{7}((0\\\\d)|(1[0-2]))(([0|1|2]\\\\d)|3[0-1])\\\\d{3}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>

<span class="token comment">// 18</span>
<span class="token keyword">var</span> reg2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[1-9]\\\\d{5}[1-9]\\\\d{3}((0\\\\d)|(1[0-2]))(([0|1|2]\\\\d)|3[0-1])\\\\d{3}([0-9]|X)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6821\u9A8C\u91D1\u989D" tabindex="-1"><a class="header-anchor" href="#\u6821\u9A8C\u91D1\u989D" aria-hidden="true">#</a> \u6821\u9A8C\u91D1\u989D</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]+(.[0-9]{2})?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="\u6821\u9A8C\u624B\u673A\u53F7" tabindex="-1"><a class="header-anchor" href="#\u6821\u9A8C\u624B\u673A\u53F7" aria-hidden="true">#</a> \u6821\u9A8C\u624B\u673A\u53F7</h2><p>\u4E0B\u9762\u662F\u56FD\u5185 13\u300115\u300118\u5F00\u5934\u7684\u624B\u673A\u53F7\u6B63\u5219\u8868\u8FBE\u5F0F\u3002\uFF08\u53EF\u6839\u636E\u76EE\u524D\u56FD\u5185\u6536\u96C6\u53F7\u6269\u5C55\u524D\u4E24\u4F4D\u5F00\u5934\u53F7\u7801\uFF09</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\\\d{8}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="\u63D0\u53D6url\u94FE\u63A5" tabindex="-1"><a class="header-anchor" href="#\u63D0\u53D6url\u94FE\u63A5" aria-hidden="true">#</a> \u63D0\u53D6URL\u94FE\u63A5</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(f|ht){1}(tp|tps):\\/\\/([\\w-]+\\.)+[\\w-]+(\\/[\\w- ./?%&amp;=]*)?</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="\u63D0\u53D6color-hex-codes" tabindex="-1"><a class="header-anchor" href="#\u63D0\u53D6color-hex-codes" aria-hidden="true">#</a> \u63D0\u53D6Color Hex Codes</h2><p>\u6709\u65F6\u9700\u8981\u62BD\u53D6\u7F51\u9875\u4E2D\u7684\u989C\u8272\u4EE3\u7801\uFF0C\u53EF\u4EE5\u4F7F\u7528\u4E0B\u9762\u7684\u8868\u8FBE\u5F0F\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="\u63D0\u53D6\u7F51\u9875\u56FE\u7247" tabindex="-1"><a class="header-anchor" href="#\u63D0\u53D6\u7F51\u9875\u56FE\u7247" aria-hidden="true">#</a> \u63D0\u53D6\u7F51\u9875\u56FE\u7247</h2><p>\u5047\u82E5\u4F60\u60F3\u63D0\u53D6\u7F51\u9875\u4E2D\u6240\u6709\u56FE\u7247\u4FE1\u606F\uFF0C\u53EF\u4EE5\u5229\u7528\u4E0B\u9762\u7684\u8868\u8FBE\u5F0F\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\\\&lt; *[img][^\\\\&gt;]*[src] *= *[\\\\&quot;\\&#39;]{0,1}([^\\\\&quot;\\&#39;\\ &gt;]*)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="\u63D0\u53D6\u9875\u9762\u8D85\u94FE\u63A5" tabindex="-1"><a class="header-anchor" href="#\u63D0\u53D6\u9875\u9762\u8D85\u94FE\u63A5" aria-hidden="true">#</a> \u63D0\u53D6\u9875\u9762\u8D85\u94FE\u63A5</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(&lt;a\\\\s*(?!.*\\\\brel=)[^&gt;]*)(href=&quot;https?:\\/\\/)((?!(?:(?:www\\\\.)?&#39;.implode(&#39;|(?:www\\\\.)?&#39;, $follow_list).&#39;))[^&quot;]+)&quot;((?!.*\\\\brel=)[^&gt;]*)(?:[^&gt;]*)&gt;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="\u67E5\u627Ecss\u5C5E\u6027" tabindex="-1"><a class="header-anchor" href="#\u67E5\u627Ecss\u5C5E\u6027" aria-hidden="true">#</a> \u67E5\u627ECSS\u5C5E\u6027</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\\\s*[a-zA-Z\\\\-]+\\\\s*[:]{1}\\\\s[a-zA-Z0-9\\\\s.#]+[;]{1}</span><span class="token regex-delimiter">/</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="\u62BD\u53D6\u6CE8\u91CA" tabindex="-1"><a class="header-anchor" href="#\u62BD\u53D6\u6CE8\u91CA" aria-hidden="true">#</a> \u62BD\u53D6\u6CE8\u91CA</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;!--(.*?)--&gt;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,53),o=[t];function c(l,r){return a(),n("div",null,o)}const u=s(p,[["render",c],["__file","06.html.vue"]]);export{u as default};
